/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jumlabs.jcr.oak.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-1-17")
public class TPropertyDefinition implements org.apache.thrift.TBase<TPropertyDefinition, TPropertyDefinition._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyDefinition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyDefinition");

  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValues", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REQUIRED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMultiple", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_QUERY_ORDERABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isQueryOrderable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_FULL_TEXT_SERCHEABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFullTextSercheable", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_AUTOCREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutocreated", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MANDATORY_FIELD_DESC = new org.apache.thrift.protocol.TField("isMandatory", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_PROTECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isProtected", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPropertyDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPropertyDefinitionTupleSchemeFactory());
  }

  public List<TValue> defaultValues; // required
  public int requiredType; // required
  public String name; // required
  public boolean isMultiple; // required
  public boolean isQueryOrderable; // required
  public boolean isFullTextSercheable; // required
  public boolean isAutocreated; // required
  public boolean isMandatory; // required
  public boolean isProtected; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEFAULT_VALUES((short)1, "defaultValues"),
    REQUIRED_TYPE((short)2, "requiredType"),
    NAME((short)3, "name"),
    IS_MULTIPLE((short)4, "isMultiple"),
    IS_QUERY_ORDERABLE((short)5, "isQueryOrderable"),
    IS_FULL_TEXT_SERCHEABLE((short)6, "isFullTextSercheable"),
    IS_AUTOCREATED((short)7, "isAutocreated"),
    IS_MANDATORY((short)8, "isMandatory"),
    IS_PROTECTED((short)9, "isProtected");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        case 2: // REQUIRED_TYPE
          return REQUIRED_TYPE;
        case 3: // NAME
          return NAME;
        case 4: // IS_MULTIPLE
          return IS_MULTIPLE;
        case 5: // IS_QUERY_ORDERABLE
          return IS_QUERY_ORDERABLE;
        case 6: // IS_FULL_TEXT_SERCHEABLE
          return IS_FULL_TEXT_SERCHEABLE;
        case 7: // IS_AUTOCREATED
          return IS_AUTOCREATED;
        case 8: // IS_MANDATORY
          return IS_MANDATORY;
        case 9: // IS_PROTECTED
          return IS_PROTECTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIREDTYPE_ISSET_ID = 0;
  private static final int __ISMULTIPLE_ISSET_ID = 1;
  private static final int __ISQUERYORDERABLE_ISSET_ID = 2;
  private static final int __ISFULLTEXTSERCHEABLE_ISSET_ID = 3;
  private static final int __ISAUTOCREATED_ISSET_ID = 4;
  private static final int __ISMANDATORY_ISSET_ID = 5;
  private static final int __ISPROTECTED_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("defaultValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TValue.class))));
    tmpMap.put(_Fields.REQUIRED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requiredType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("isMultiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_QUERY_ORDERABLE, new org.apache.thrift.meta_data.FieldMetaData("isQueryOrderable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FULL_TEXT_SERCHEABLE, new org.apache.thrift.meta_data.FieldMetaData("isFullTextSercheable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_AUTOCREATED, new org.apache.thrift.meta_data.FieldMetaData("isAutocreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MANDATORY, new org.apache.thrift.meta_data.FieldMetaData("isMandatory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PROTECTED, new org.apache.thrift.meta_data.FieldMetaData("isProtected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyDefinition.class, metaDataMap);
  }

  public TPropertyDefinition() {
  }

  public TPropertyDefinition(
    List<TValue> defaultValues,
    int requiredType,
    String name,
    boolean isMultiple,
    boolean isQueryOrderable,
    boolean isFullTextSercheable,
    boolean isAutocreated,
    boolean isMandatory,
    boolean isProtected)
  {
    this();
    this.defaultValues = defaultValues;
    this.requiredType = requiredType;
    setRequiredTypeIsSet(true);
    this.name = name;
    this.isMultiple = isMultiple;
    setIsMultipleIsSet(true);
    this.isQueryOrderable = isQueryOrderable;
    setIsQueryOrderableIsSet(true);
    this.isFullTextSercheable = isFullTextSercheable;
    setIsFullTextSercheableIsSet(true);
    this.isAutocreated = isAutocreated;
    setIsAutocreatedIsSet(true);
    this.isMandatory = isMandatory;
    setIsMandatoryIsSet(true);
    this.isProtected = isProtected;
    setIsProtectedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyDefinition(TPropertyDefinition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDefaultValues()) {
      List<TValue> __this__defaultValues = new ArrayList<TValue>(other.defaultValues.size());
      for (TValue other_element : other.defaultValues) {
        __this__defaultValues.add(new TValue(other_element));
      }
      this.defaultValues = __this__defaultValues;
    }
    this.requiredType = other.requiredType;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.isMultiple = other.isMultiple;
    this.isQueryOrderable = other.isQueryOrderable;
    this.isFullTextSercheable = other.isFullTextSercheable;
    this.isAutocreated = other.isAutocreated;
    this.isMandatory = other.isMandatory;
    this.isProtected = other.isProtected;
  }

  public TPropertyDefinition deepCopy() {
    return new TPropertyDefinition(this);
  }

  @Override
  public void clear() {
    this.defaultValues = null;
    setRequiredTypeIsSet(false);
    this.requiredType = 0;
    this.name = null;
    setIsMultipleIsSet(false);
    this.isMultiple = false;
    setIsQueryOrderableIsSet(false);
    this.isQueryOrderable = false;
    setIsFullTextSercheableIsSet(false);
    this.isFullTextSercheable = false;
    setIsAutocreatedIsSet(false);
    this.isAutocreated = false;
    setIsMandatoryIsSet(false);
    this.isMandatory = false;
    setIsProtectedIsSet(false);
    this.isProtected = false;
  }

  public int getDefaultValuesSize() {
    return (this.defaultValues == null) ? 0 : this.defaultValues.size();
  }

  public java.util.Iterator<TValue> getDefaultValuesIterator() {
    return (this.defaultValues == null) ? null : this.defaultValues.iterator();
  }

  public void addToDefaultValues(TValue elem) {
    if (this.defaultValues == null) {
      this.defaultValues = new ArrayList<TValue>();
    }
    this.defaultValues.add(elem);
  }

  public List<TValue> getDefaultValues() {
    return this.defaultValues;
  }

  public TPropertyDefinition setDefaultValues(List<TValue> defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public void unsetDefaultValues() {
    this.defaultValues = null;
  }

  /** Returns true if field defaultValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValues() {
    return this.defaultValues != null;
  }

  public void setDefaultValuesIsSet(boolean value) {
    if (!value) {
      this.defaultValues = null;
    }
  }

  public int getRequiredType() {
    return this.requiredType;
  }

  public TPropertyDefinition setRequiredType(int requiredType) {
    this.requiredType = requiredType;
    setRequiredTypeIsSet(true);
    return this;
  }

  public void unsetRequiredType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIREDTYPE_ISSET_ID);
  }

  /** Returns true if field requiredType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredType() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIREDTYPE_ISSET_ID);
  }

  public void setRequiredTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIREDTYPE_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TPropertyDefinition setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isIsMultiple() {
    return this.isMultiple;
  }

  public TPropertyDefinition setIsMultiple(boolean isMultiple) {
    this.isMultiple = isMultiple;
    setIsMultipleIsSet(true);
    return this;
  }

  public void unsetIsMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMULTIPLE_ISSET_ID);
  }

  /** Returns true if field isMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMULTIPLE_ISSET_ID);
  }

  public void setIsMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMULTIPLE_ISSET_ID, value);
  }

  public boolean isIsQueryOrderable() {
    return this.isQueryOrderable;
  }

  public TPropertyDefinition setIsQueryOrderable(boolean isQueryOrderable) {
    this.isQueryOrderable = isQueryOrderable;
    setIsQueryOrderableIsSet(true);
    return this;
  }

  public void unsetIsQueryOrderable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISQUERYORDERABLE_ISSET_ID);
  }

  /** Returns true if field isQueryOrderable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsQueryOrderable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISQUERYORDERABLE_ISSET_ID);
  }

  public void setIsQueryOrderableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISQUERYORDERABLE_ISSET_ID, value);
  }

  public boolean isIsFullTextSercheable() {
    return this.isFullTextSercheable;
  }

  public TPropertyDefinition setIsFullTextSercheable(boolean isFullTextSercheable) {
    this.isFullTextSercheable = isFullTextSercheable;
    setIsFullTextSercheableIsSet(true);
    return this;
  }

  public void unsetIsFullTextSercheable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFULLTEXTSERCHEABLE_ISSET_ID);
  }

  /** Returns true if field isFullTextSercheable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFullTextSercheable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFULLTEXTSERCHEABLE_ISSET_ID);
  }

  public void setIsFullTextSercheableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFULLTEXTSERCHEABLE_ISSET_ID, value);
  }

  public boolean isIsAutocreated() {
    return this.isAutocreated;
  }

  public TPropertyDefinition setIsAutocreated(boolean isAutocreated) {
    this.isAutocreated = isAutocreated;
    setIsAutocreatedIsSet(true);
    return this;
  }

  public void unsetIsAutocreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOCREATED_ISSET_ID);
  }

  /** Returns true if field isAutocreated is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutocreated() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTOCREATED_ISSET_ID);
  }

  public void setIsAutocreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOCREATED_ISSET_ID, value);
  }

  public boolean isIsMandatory() {
    return this.isMandatory;
  }

  public TPropertyDefinition setIsMandatory(boolean isMandatory) {
    this.isMandatory = isMandatory;
    setIsMandatoryIsSet(true);
    return this;
  }

  public void unsetIsMandatory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMANDATORY_ISSET_ID);
  }

  /** Returns true if field isMandatory is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMandatory() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMANDATORY_ISSET_ID);
  }

  public void setIsMandatoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMANDATORY_ISSET_ID, value);
  }

  public boolean isIsProtected() {
    return this.isProtected;
  }

  public TPropertyDefinition setIsProtected(boolean isProtected) {
    this.isProtected = isProtected;
    setIsProtectedIsSet(true);
    return this;
  }

  public void unsetIsProtected() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPROTECTED_ISSET_ID);
  }

  /** Returns true if field isProtected is set (has been assigned a value) and false otherwise */
  public boolean isSetIsProtected() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPROTECTED_ISSET_ID);
  }

  public void setIsProtectedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPROTECTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefaultValues();
      } else {
        setDefaultValues((List<TValue>)value);
      }
      break;

    case REQUIRED_TYPE:
      if (value == null) {
        unsetRequiredType();
      } else {
        setRequiredType((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IS_MULTIPLE:
      if (value == null) {
        unsetIsMultiple();
      } else {
        setIsMultiple((Boolean)value);
      }
      break;

    case IS_QUERY_ORDERABLE:
      if (value == null) {
        unsetIsQueryOrderable();
      } else {
        setIsQueryOrderable((Boolean)value);
      }
      break;

    case IS_FULL_TEXT_SERCHEABLE:
      if (value == null) {
        unsetIsFullTextSercheable();
      } else {
        setIsFullTextSercheable((Boolean)value);
      }
      break;

    case IS_AUTOCREATED:
      if (value == null) {
        unsetIsAutocreated();
      } else {
        setIsAutocreated((Boolean)value);
      }
      break;

    case IS_MANDATORY:
      if (value == null) {
        unsetIsMandatory();
      } else {
        setIsMandatory((Boolean)value);
      }
      break;

    case IS_PROTECTED:
      if (value == null) {
        unsetIsProtected();
      } else {
        setIsProtected((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFAULT_VALUES:
      return getDefaultValues();

    case REQUIRED_TYPE:
      return Integer.valueOf(getRequiredType());

    case NAME:
      return getName();

    case IS_MULTIPLE:
      return Boolean.valueOf(isIsMultiple());

    case IS_QUERY_ORDERABLE:
      return Boolean.valueOf(isIsQueryOrderable());

    case IS_FULL_TEXT_SERCHEABLE:
      return Boolean.valueOf(isIsFullTextSercheable());

    case IS_AUTOCREATED:
      return Boolean.valueOf(isIsAutocreated());

    case IS_MANDATORY:
      return Boolean.valueOf(isIsMandatory());

    case IS_PROTECTED:
      return Boolean.valueOf(isIsProtected());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEFAULT_VALUES:
      return isSetDefaultValues();
    case REQUIRED_TYPE:
      return isSetRequiredType();
    case NAME:
      return isSetName();
    case IS_MULTIPLE:
      return isSetIsMultiple();
    case IS_QUERY_ORDERABLE:
      return isSetIsQueryOrderable();
    case IS_FULL_TEXT_SERCHEABLE:
      return isSetIsFullTextSercheable();
    case IS_AUTOCREATED:
      return isSetIsAutocreated();
    case IS_MANDATORY:
      return isSetIsMandatory();
    case IS_PROTECTED:
      return isSetIsProtected();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyDefinition)
      return this.equals((TPropertyDefinition)that);
    return false;
  }

  public boolean equals(TPropertyDefinition that) {
    if (that == null)
      return false;

    boolean this_present_defaultValues = true && this.isSetDefaultValues();
    boolean that_present_defaultValues = true && that.isSetDefaultValues();
    if (this_present_defaultValues || that_present_defaultValues) {
      if (!(this_present_defaultValues && that_present_defaultValues))
        return false;
      if (!this.defaultValues.equals(that.defaultValues))
        return false;
    }

    boolean this_present_requiredType = true;
    boolean that_present_requiredType = true;
    if (this_present_requiredType || that_present_requiredType) {
      if (!(this_present_requiredType && that_present_requiredType))
        return false;
      if (this.requiredType != that.requiredType)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_isMultiple = true;
    boolean that_present_isMultiple = true;
    if (this_present_isMultiple || that_present_isMultiple) {
      if (!(this_present_isMultiple && that_present_isMultiple))
        return false;
      if (this.isMultiple != that.isMultiple)
        return false;
    }

    boolean this_present_isQueryOrderable = true;
    boolean that_present_isQueryOrderable = true;
    if (this_present_isQueryOrderable || that_present_isQueryOrderable) {
      if (!(this_present_isQueryOrderable && that_present_isQueryOrderable))
        return false;
      if (this.isQueryOrderable != that.isQueryOrderable)
        return false;
    }

    boolean this_present_isFullTextSercheable = true;
    boolean that_present_isFullTextSercheable = true;
    if (this_present_isFullTextSercheable || that_present_isFullTextSercheable) {
      if (!(this_present_isFullTextSercheable && that_present_isFullTextSercheable))
        return false;
      if (this.isFullTextSercheable != that.isFullTextSercheable)
        return false;
    }

    boolean this_present_isAutocreated = true;
    boolean that_present_isAutocreated = true;
    if (this_present_isAutocreated || that_present_isAutocreated) {
      if (!(this_present_isAutocreated && that_present_isAutocreated))
        return false;
      if (this.isAutocreated != that.isAutocreated)
        return false;
    }

    boolean this_present_isMandatory = true;
    boolean that_present_isMandatory = true;
    if (this_present_isMandatory || that_present_isMandatory) {
      if (!(this_present_isMandatory && that_present_isMandatory))
        return false;
      if (this.isMandatory != that.isMandatory)
        return false;
    }

    boolean this_present_isProtected = true;
    boolean that_present_isProtected = true;
    if (this_present_isProtected || that_present_isProtected) {
      if (!(this_present_isProtected && that_present_isProtected))
        return false;
      if (this.isProtected != that.isProtected)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_defaultValues = true && (isSetDefaultValues());
    list.add(present_defaultValues);
    if (present_defaultValues)
      list.add(defaultValues);

    boolean present_requiredType = true;
    list.add(present_requiredType);
    if (present_requiredType)
      list.add(requiredType);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_isMultiple = true;
    list.add(present_isMultiple);
    if (present_isMultiple)
      list.add(isMultiple);

    boolean present_isQueryOrderable = true;
    list.add(present_isQueryOrderable);
    if (present_isQueryOrderable)
      list.add(isQueryOrderable);

    boolean present_isFullTextSercheable = true;
    list.add(present_isFullTextSercheable);
    if (present_isFullTextSercheable)
      list.add(isFullTextSercheable);

    boolean present_isAutocreated = true;
    list.add(present_isAutocreated);
    if (present_isAutocreated)
      list.add(isAutocreated);

    boolean present_isMandatory = true;
    list.add(present_isMandatory);
    if (present_isMandatory)
      list.add(isMandatory);

    boolean present_isProtected = true;
    list.add(present_isProtected);
    if (present_isProtected)
      list.add(isProtected);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPropertyDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDefaultValues()).compareTo(other.isSetDefaultValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValues, other.defaultValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiredType()).compareTo(other.isSetRequiredType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredType, other.requiredType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMultiple()).compareTo(other.isSetIsMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMultiple, other.isMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsQueryOrderable()).compareTo(other.isSetIsQueryOrderable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsQueryOrderable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isQueryOrderable, other.isQueryOrderable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFullTextSercheable()).compareTo(other.isSetIsFullTextSercheable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFullTextSercheable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFullTextSercheable, other.isFullTextSercheable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutocreated()).compareTo(other.isSetIsAutocreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutocreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutocreated, other.isAutocreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMandatory()).compareTo(other.isSetIsMandatory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMandatory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMandatory, other.isMandatory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsProtected()).compareTo(other.isSetIsProtected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsProtected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isProtected, other.isProtected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPropertyDefinition(");
    boolean first = true;

    sb.append("defaultValues:");
    if (this.defaultValues == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredType:");
    sb.append(this.requiredType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMultiple:");
    sb.append(this.isMultiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isQueryOrderable:");
    sb.append(this.isQueryOrderable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFullTextSercheable:");
    sb.append(this.isFullTextSercheable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAutocreated:");
    sb.append(this.isAutocreated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMandatory:");
    sb.append(this.isMandatory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isProtected:");
    sb.append(this.isProtected);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyDefinitionStandardSchemeFactory implements SchemeFactory {
    public TPropertyDefinitionStandardScheme getScheme() {
      return new TPropertyDefinitionStandardScheme();
    }
  }

  private static class TPropertyDefinitionStandardScheme extends StandardScheme<TPropertyDefinition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyDefinition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.defaultValues = new ArrayList<TValue>(_list0.size);
                TValue _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TValue();
                  _elem1.read(iprot);
                  struct.defaultValues.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDefaultValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUIRED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requiredType = iprot.readI32();
              struct.setRequiredTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMultiple = iprot.readBool();
              struct.setIsMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_QUERY_ORDERABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isQueryOrderable = iprot.readBool();
              struct.setIsQueryOrderableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_FULL_TEXT_SERCHEABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFullTextSercheable = iprot.readBool();
              struct.setIsFullTextSercheableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_AUTOCREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAutocreated = iprot.readBool();
              struct.setIsAutocreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MANDATORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMandatory = iprot.readBool();
              struct.setIsMandatoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_PROTECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isProtected = iprot.readBool();
              struct.setIsProtectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyDefinition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.defaultValues != null) {
        oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defaultValues.size()));
          for (TValue _iter3 : struct.defaultValues)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUIRED_TYPE_FIELD_DESC);
      oprot.writeI32(struct.requiredType);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_MULTIPLE_FIELD_DESC);
      oprot.writeBool(struct.isMultiple);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_QUERY_ORDERABLE_FIELD_DESC);
      oprot.writeBool(struct.isQueryOrderable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FULL_TEXT_SERCHEABLE_FIELD_DESC);
      oprot.writeBool(struct.isFullTextSercheable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_AUTOCREATED_FIELD_DESC);
      oprot.writeBool(struct.isAutocreated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MANDATORY_FIELD_DESC);
      oprot.writeBool(struct.isMandatory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PROTECTED_FIELD_DESC);
      oprot.writeBool(struct.isProtected);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyDefinitionTupleSchemeFactory implements SchemeFactory {
    public TPropertyDefinitionTupleScheme getScheme() {
      return new TPropertyDefinitionTupleScheme();
    }
  }

  private static class TPropertyDefinitionTupleScheme extends TupleScheme<TPropertyDefinition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDefaultValues()) {
        optionals.set(0);
      }
      if (struct.isSetRequiredType()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetIsMultiple()) {
        optionals.set(3);
      }
      if (struct.isSetIsQueryOrderable()) {
        optionals.set(4);
      }
      if (struct.isSetIsFullTextSercheable()) {
        optionals.set(5);
      }
      if (struct.isSetIsAutocreated()) {
        optionals.set(6);
      }
      if (struct.isSetIsMandatory()) {
        optionals.set(7);
      }
      if (struct.isSetIsProtected()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDefaultValues()) {
        {
          oprot.writeI32(struct.defaultValues.size());
          for (TValue _iter4 : struct.defaultValues)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetRequiredType()) {
        oprot.writeI32(struct.requiredType);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIsMultiple()) {
        oprot.writeBool(struct.isMultiple);
      }
      if (struct.isSetIsQueryOrderable()) {
        oprot.writeBool(struct.isQueryOrderable);
      }
      if (struct.isSetIsFullTextSercheable()) {
        oprot.writeBool(struct.isFullTextSercheable);
      }
      if (struct.isSetIsAutocreated()) {
        oprot.writeBool(struct.isAutocreated);
      }
      if (struct.isSetIsMandatory()) {
        oprot.writeBool(struct.isMandatory);
      }
      if (struct.isSetIsProtected()) {
        oprot.writeBool(struct.isProtected);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.defaultValues = new ArrayList<TValue>(_list5.size);
          TValue _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TValue();
            _elem6.read(iprot);
            struct.defaultValues.add(_elem6);
          }
        }
        struct.setDefaultValuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requiredType = iprot.readI32();
        struct.setRequiredTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isMultiple = iprot.readBool();
        struct.setIsMultipleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isQueryOrderable = iprot.readBool();
        struct.setIsQueryOrderableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isFullTextSercheable = iprot.readBool();
        struct.setIsFullTextSercheableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isAutocreated = iprot.readBool();
        struct.setIsAutocreatedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMandatory = iprot.readBool();
        struct.setIsMandatoryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isProtected = iprot.readBool();
        struct.setIsProtectedIsSet(true);
      }
    }
  }

}

