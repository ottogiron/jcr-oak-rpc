/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jumlabs.jcr.oak.rpc.thrift.nodetype;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-2-4")
public class TNodeTypeService {

  public interface Iface {

    public boolean canAddChildNodeWithName(TNodeType nodeType, String childNodeName) throws org.apache.thrift.TException;

    public boolean canAddChildNodeWithType(TNodeType nodeType, String childNodeName, String nodeTypeName) throws org.apache.thrift.TException;

    public boolean canRemoveNode(TNodeType nodeType, String nodeName) throws org.apache.thrift.TException;

    public boolean isNodeType(TNodeType nodeType, String nodeTypeName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void canAddChildNodeWithName(TNodeType nodeType, String childNodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void canAddChildNodeWithType(TNodeType nodeType, String childNodeName, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void canRemoveNode(TNodeType nodeType, String nodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isNodeType(TNodeType nodeType, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean canAddChildNodeWithName(TNodeType nodeType, String childNodeName) throws org.apache.thrift.TException
    {
      send_canAddChildNodeWithName(nodeType, childNodeName);
      return recv_canAddChildNodeWithName();
    }

    public void send_canAddChildNodeWithName(TNodeType nodeType, String childNodeName) throws org.apache.thrift.TException
    {
      canAddChildNodeWithName_args args = new canAddChildNodeWithName_args();
      args.setNodeType(nodeType);
      args.setChildNodeName(childNodeName);
      sendBase("canAddChildNodeWithName", args);
    }

    public boolean recv_canAddChildNodeWithName() throws org.apache.thrift.TException
    {
      canAddChildNodeWithName_result result = new canAddChildNodeWithName_result();
      receiveBase(result, "canAddChildNodeWithName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canAddChildNodeWithName failed: unknown result");
    }

    public boolean canAddChildNodeWithType(TNodeType nodeType, String childNodeName, String nodeTypeName) throws org.apache.thrift.TException
    {
      send_canAddChildNodeWithType(nodeType, childNodeName, nodeTypeName);
      return recv_canAddChildNodeWithType();
    }

    public void send_canAddChildNodeWithType(TNodeType nodeType, String childNodeName, String nodeTypeName) throws org.apache.thrift.TException
    {
      canAddChildNodeWithType_args args = new canAddChildNodeWithType_args();
      args.setNodeType(nodeType);
      args.setChildNodeName(childNodeName);
      args.setNodeTypeName(nodeTypeName);
      sendBase("canAddChildNodeWithType", args);
    }

    public boolean recv_canAddChildNodeWithType() throws org.apache.thrift.TException
    {
      canAddChildNodeWithType_result result = new canAddChildNodeWithType_result();
      receiveBase(result, "canAddChildNodeWithType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canAddChildNodeWithType failed: unknown result");
    }

    public boolean canRemoveNode(TNodeType nodeType, String nodeName) throws org.apache.thrift.TException
    {
      send_canRemoveNode(nodeType, nodeName);
      return recv_canRemoveNode();
    }

    public void send_canRemoveNode(TNodeType nodeType, String nodeName) throws org.apache.thrift.TException
    {
      canRemoveNode_args args = new canRemoveNode_args();
      args.setNodeType(nodeType);
      args.setNodeName(nodeName);
      sendBase("canRemoveNode", args);
    }

    public boolean recv_canRemoveNode() throws org.apache.thrift.TException
    {
      canRemoveNode_result result = new canRemoveNode_result();
      receiveBase(result, "canRemoveNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canRemoveNode failed: unknown result");
    }

    public boolean isNodeType(TNodeType nodeType, String nodeTypeName) throws org.apache.thrift.TException
    {
      send_isNodeType(nodeType, nodeTypeName);
      return recv_isNodeType();
    }

    public void send_isNodeType(TNodeType nodeType, String nodeTypeName) throws org.apache.thrift.TException
    {
      isNodeType_args args = new isNodeType_args();
      args.setNodeType(nodeType);
      args.setNodeTypeName(nodeTypeName);
      sendBase("isNodeType", args);
    }

    public boolean recv_isNodeType() throws org.apache.thrift.TException
    {
      isNodeType_result result = new isNodeType_result();
      receiveBase(result, "isNodeType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isNodeType failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void canAddChildNodeWithName(TNodeType nodeType, String childNodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canAddChildNodeWithName_call method_call = new canAddChildNodeWithName_call(nodeType, childNodeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canAddChildNodeWithName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TNodeType nodeType;
      private String childNodeName;
      public canAddChildNodeWithName_call(TNodeType nodeType, String childNodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeType = nodeType;
        this.childNodeName = childNodeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canAddChildNodeWithName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canAddChildNodeWithName_args args = new canAddChildNodeWithName_args();
        args.setNodeType(nodeType);
        args.setChildNodeName(childNodeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canAddChildNodeWithName();
      }
    }

    public void canAddChildNodeWithType(TNodeType nodeType, String childNodeName, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canAddChildNodeWithType_call method_call = new canAddChildNodeWithType_call(nodeType, childNodeName, nodeTypeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canAddChildNodeWithType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TNodeType nodeType;
      private String childNodeName;
      private String nodeTypeName;
      public canAddChildNodeWithType_call(TNodeType nodeType, String childNodeName, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeType = nodeType;
        this.childNodeName = childNodeName;
        this.nodeTypeName = nodeTypeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canAddChildNodeWithType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canAddChildNodeWithType_args args = new canAddChildNodeWithType_args();
        args.setNodeType(nodeType);
        args.setChildNodeName(childNodeName);
        args.setNodeTypeName(nodeTypeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canAddChildNodeWithType();
      }
    }

    public void canRemoveNode(TNodeType nodeType, String nodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canRemoveNode_call method_call = new canRemoveNode_call(nodeType, nodeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canRemoveNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TNodeType nodeType;
      private String nodeName;
      public canRemoveNode_call(TNodeType nodeType, String nodeName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeType = nodeType;
        this.nodeName = nodeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canRemoveNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canRemoveNode_args args = new canRemoveNode_args();
        args.setNodeType(nodeType);
        args.setNodeName(nodeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canRemoveNode();
      }
    }

    public void isNodeType(TNodeType nodeType, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isNodeType_call method_call = new isNodeType_call(nodeType, nodeTypeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isNodeType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TNodeType nodeType;
      private String nodeTypeName;
      public isNodeType_call(TNodeType nodeType, String nodeTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeType = nodeType;
        this.nodeTypeName = nodeTypeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isNodeType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isNodeType_args args = new isNodeType_args();
        args.setNodeType(nodeType);
        args.setNodeTypeName(nodeTypeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isNodeType();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("canAddChildNodeWithName", new canAddChildNodeWithName());
      processMap.put("canAddChildNodeWithType", new canAddChildNodeWithType());
      processMap.put("canRemoveNode", new canRemoveNode());
      processMap.put("isNodeType", new isNodeType());
      return processMap;
    }

    public static class canAddChildNodeWithName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canAddChildNodeWithName_args> {
      public canAddChildNodeWithName() {
        super("canAddChildNodeWithName");
      }

      public canAddChildNodeWithName_args getEmptyArgsInstance() {
        return new canAddChildNodeWithName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public canAddChildNodeWithName_result getResult(I iface, canAddChildNodeWithName_args args) throws org.apache.thrift.TException {
        canAddChildNodeWithName_result result = new canAddChildNodeWithName_result();
        result.success = iface.canAddChildNodeWithName(args.nodeType, args.childNodeName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class canAddChildNodeWithType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canAddChildNodeWithType_args> {
      public canAddChildNodeWithType() {
        super("canAddChildNodeWithType");
      }

      public canAddChildNodeWithType_args getEmptyArgsInstance() {
        return new canAddChildNodeWithType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public canAddChildNodeWithType_result getResult(I iface, canAddChildNodeWithType_args args) throws org.apache.thrift.TException {
        canAddChildNodeWithType_result result = new canAddChildNodeWithType_result();
        result.success = iface.canAddChildNodeWithType(args.nodeType, args.childNodeName, args.nodeTypeName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class canRemoveNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canRemoveNode_args> {
      public canRemoveNode() {
        super("canRemoveNode");
      }

      public canRemoveNode_args getEmptyArgsInstance() {
        return new canRemoveNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public canRemoveNode_result getResult(I iface, canRemoveNode_args args) throws org.apache.thrift.TException {
        canRemoveNode_result result = new canRemoveNode_result();
        result.success = iface.canRemoveNode(args.nodeType, args.nodeName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isNodeType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isNodeType_args> {
      public isNodeType() {
        super("isNodeType");
      }

      public isNodeType_args getEmptyArgsInstance() {
        return new isNodeType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isNodeType_result getResult(I iface, isNodeType_args args) throws org.apache.thrift.TException {
        isNodeType_result result = new isNodeType_result();
        result.success = iface.isNodeType(args.nodeType, args.nodeTypeName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("canAddChildNodeWithName", new canAddChildNodeWithName());
      processMap.put("canAddChildNodeWithType", new canAddChildNodeWithType());
      processMap.put("canRemoveNode", new canRemoveNode());
      processMap.put("isNodeType", new isNodeType());
      return processMap;
    }

    public static class canAddChildNodeWithName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canAddChildNodeWithName_args, Boolean> {
      public canAddChildNodeWithName() {
        super("canAddChildNodeWithName");
      }

      public canAddChildNodeWithName_args getEmptyArgsInstance() {
        return new canAddChildNodeWithName_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            canAddChildNodeWithName_result result = new canAddChildNodeWithName_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            canAddChildNodeWithName_result result = new canAddChildNodeWithName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canAddChildNodeWithName_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.canAddChildNodeWithName(args.nodeType, args.childNodeName,resultHandler);
      }
    }

    public static class canAddChildNodeWithType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canAddChildNodeWithType_args, Boolean> {
      public canAddChildNodeWithType() {
        super("canAddChildNodeWithType");
      }

      public canAddChildNodeWithType_args getEmptyArgsInstance() {
        return new canAddChildNodeWithType_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            canAddChildNodeWithType_result result = new canAddChildNodeWithType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            canAddChildNodeWithType_result result = new canAddChildNodeWithType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canAddChildNodeWithType_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.canAddChildNodeWithType(args.nodeType, args.childNodeName, args.nodeTypeName,resultHandler);
      }
    }

    public static class canRemoveNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canRemoveNode_args, Boolean> {
      public canRemoveNode() {
        super("canRemoveNode");
      }

      public canRemoveNode_args getEmptyArgsInstance() {
        return new canRemoveNode_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            canRemoveNode_result result = new canRemoveNode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            canRemoveNode_result result = new canRemoveNode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canRemoveNode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.canRemoveNode(args.nodeType, args.nodeName,resultHandler);
      }
    }

    public static class isNodeType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isNodeType_args, Boolean> {
      public isNodeType() {
        super("isNodeType");
      }

      public isNodeType_args getEmptyArgsInstance() {
        return new isNodeType_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isNodeType_result result = new isNodeType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isNodeType_result result = new isNodeType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isNodeType_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isNodeType(args.nodeType, args.nodeTypeName,resultHandler);
      }
    }

  }

  public static class canAddChildNodeWithName_args implements org.apache.thrift.TBase<canAddChildNodeWithName_args, canAddChildNodeWithName_args._Fields>, java.io.Serializable, Cloneable, Comparable<canAddChildNodeWithName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canAddChildNodeWithName_args");

    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CHILD_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("childNodeName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canAddChildNodeWithName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canAddChildNodeWithName_argsTupleSchemeFactory());
    }

    public TNodeType nodeType; // required
    public String childNodeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_TYPE((short)1, "nodeType"),
      CHILD_NODE_NAME((short)2, "childNodeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_TYPE
            return NODE_TYPE;
          case 2: // CHILD_NODE_NAME
            return CHILD_NODE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeType.class)));
      tmpMap.put(_Fields.CHILD_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("childNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canAddChildNodeWithName_args.class, metaDataMap);
    }

    public canAddChildNodeWithName_args() {
    }

    public canAddChildNodeWithName_args(
      TNodeType nodeType,
      String childNodeName)
    {
      this();
      this.nodeType = nodeType;
      this.childNodeName = childNodeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canAddChildNodeWithName_args(canAddChildNodeWithName_args other) {
      if (other.isSetNodeType()) {
        this.nodeType = new TNodeType(other.nodeType);
      }
      if (other.isSetChildNodeName()) {
        this.childNodeName = other.childNodeName;
      }
    }

    public canAddChildNodeWithName_args deepCopy() {
      return new canAddChildNodeWithName_args(this);
    }

    @Override
    public void clear() {
      this.nodeType = null;
      this.childNodeName = null;
    }

    public TNodeType getNodeType() {
      return this.nodeType;
    }

    public canAddChildNodeWithName_args setNodeType(TNodeType nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public String getChildNodeName() {
      return this.childNodeName;
    }

    public canAddChildNodeWithName_args setChildNodeName(String childNodeName) {
      this.childNodeName = childNodeName;
      return this;
    }

    public void unsetChildNodeName() {
      this.childNodeName = null;
    }

    /** Returns true if field childNodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetChildNodeName() {
      return this.childNodeName != null;
    }

    public void setChildNodeNameIsSet(boolean value) {
      if (!value) {
        this.childNodeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((TNodeType)value);
        }
        break;

      case CHILD_NODE_NAME:
        if (value == null) {
          unsetChildNodeName();
        } else {
          setChildNodeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_TYPE:
        return getNodeType();

      case CHILD_NODE_NAME:
        return getChildNodeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_TYPE:
        return isSetNodeType();
      case CHILD_NODE_NAME:
        return isSetChildNodeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canAddChildNodeWithName_args)
        return this.equals((canAddChildNodeWithName_args)that);
      return false;
    }

    public boolean equals(canAddChildNodeWithName_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      boolean this_present_childNodeName = true && this.isSetChildNodeName();
      boolean that_present_childNodeName = true && that.isSetChildNodeName();
      if (this_present_childNodeName || that_present_childNodeName) {
        if (!(this_present_childNodeName && that_present_childNodeName))
          return false;
        if (!this.childNodeName.equals(that.childNodeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeType = true && (isSetNodeType());
      list.add(present_nodeType);
      if (present_nodeType)
        list.add(nodeType);

      boolean present_childNodeName = true && (isSetChildNodeName());
      list.add(present_childNodeName);
      if (present_childNodeName)
        list.add(childNodeName);

      return list.hashCode();
    }

    @Override
    public int compareTo(canAddChildNodeWithName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChildNodeName()).compareTo(other.isSetChildNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChildNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childNodeName, other.childNodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canAddChildNodeWithName_args(");
      boolean first = true;

      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("childNodeName:");
      if (this.childNodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.childNodeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeType != null) {
        nodeType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canAddChildNodeWithName_argsStandardSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithName_argsStandardScheme getScheme() {
        return new canAddChildNodeWithName_argsStandardScheme();
      }
    }

    private static class canAddChildNodeWithName_argsStandardScheme extends StandardScheme<canAddChildNodeWithName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canAddChildNodeWithName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeType = new TNodeType();
                struct.nodeType.read(iprot);
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHILD_NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.childNodeName = iprot.readString();
                struct.setChildNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canAddChildNodeWithName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          struct.nodeType.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.childNodeName != null) {
          oprot.writeFieldBegin(CHILD_NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.childNodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canAddChildNodeWithName_argsTupleSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithName_argsTupleScheme getScheme() {
        return new canAddChildNodeWithName_argsTupleScheme();
      }
    }

    private static class canAddChildNodeWithName_argsTupleScheme extends TupleScheme<canAddChildNodeWithName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeType()) {
          optionals.set(0);
        }
        if (struct.isSetChildNodeName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeType()) {
          struct.nodeType.write(oprot);
        }
        if (struct.isSetChildNodeName()) {
          oprot.writeString(struct.childNodeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeType = new TNodeType();
          struct.nodeType.read(iprot);
          struct.setNodeTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.childNodeName = iprot.readString();
          struct.setChildNodeNameIsSet(true);
        }
      }
    }

  }

  public static class canAddChildNodeWithName_result implements org.apache.thrift.TBase<canAddChildNodeWithName_result, canAddChildNodeWithName_result._Fields>, java.io.Serializable, Cloneable, Comparable<canAddChildNodeWithName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canAddChildNodeWithName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canAddChildNodeWithName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canAddChildNodeWithName_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canAddChildNodeWithName_result.class, metaDataMap);
    }

    public canAddChildNodeWithName_result() {
    }

    public canAddChildNodeWithName_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canAddChildNodeWithName_result(canAddChildNodeWithName_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public canAddChildNodeWithName_result deepCopy() {
      return new canAddChildNodeWithName_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canAddChildNodeWithName_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canAddChildNodeWithName_result)
        return this.equals((canAddChildNodeWithName_result)that);
      return false;
    }

    public boolean equals(canAddChildNodeWithName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(canAddChildNodeWithName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canAddChildNodeWithName_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canAddChildNodeWithName_resultStandardSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithName_resultStandardScheme getScheme() {
        return new canAddChildNodeWithName_resultStandardScheme();
      }
    }

    private static class canAddChildNodeWithName_resultStandardScheme extends StandardScheme<canAddChildNodeWithName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canAddChildNodeWithName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canAddChildNodeWithName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canAddChildNodeWithName_resultTupleSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithName_resultTupleScheme getScheme() {
        return new canAddChildNodeWithName_resultTupleScheme();
      }
    }

    private static class canAddChildNodeWithName_resultTupleScheme extends TupleScheme<canAddChildNodeWithName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class canAddChildNodeWithType_args implements org.apache.thrift.TBase<canAddChildNodeWithType_args, canAddChildNodeWithType_args._Fields>, java.io.Serializable, Cloneable, Comparable<canAddChildNodeWithType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canAddChildNodeWithType_args");

    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CHILD_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("childNodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeTypeName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canAddChildNodeWithType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canAddChildNodeWithType_argsTupleSchemeFactory());
    }

    public TNodeType nodeType; // required
    public String childNodeName; // required
    public String nodeTypeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_TYPE((short)1, "nodeType"),
      CHILD_NODE_NAME((short)2, "childNodeName"),
      NODE_TYPE_NAME((short)3, "nodeTypeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_TYPE
            return NODE_TYPE;
          case 2: // CHILD_NODE_NAME
            return CHILD_NODE_NAME;
          case 3: // NODE_TYPE_NAME
            return NODE_TYPE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeType.class)));
      tmpMap.put(_Fields.CHILD_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("childNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canAddChildNodeWithType_args.class, metaDataMap);
    }

    public canAddChildNodeWithType_args() {
    }

    public canAddChildNodeWithType_args(
      TNodeType nodeType,
      String childNodeName,
      String nodeTypeName)
    {
      this();
      this.nodeType = nodeType;
      this.childNodeName = childNodeName;
      this.nodeTypeName = nodeTypeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canAddChildNodeWithType_args(canAddChildNodeWithType_args other) {
      if (other.isSetNodeType()) {
        this.nodeType = new TNodeType(other.nodeType);
      }
      if (other.isSetChildNodeName()) {
        this.childNodeName = other.childNodeName;
      }
      if (other.isSetNodeTypeName()) {
        this.nodeTypeName = other.nodeTypeName;
      }
    }

    public canAddChildNodeWithType_args deepCopy() {
      return new canAddChildNodeWithType_args(this);
    }

    @Override
    public void clear() {
      this.nodeType = null;
      this.childNodeName = null;
      this.nodeTypeName = null;
    }

    public TNodeType getNodeType() {
      return this.nodeType;
    }

    public canAddChildNodeWithType_args setNodeType(TNodeType nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public String getChildNodeName() {
      return this.childNodeName;
    }

    public canAddChildNodeWithType_args setChildNodeName(String childNodeName) {
      this.childNodeName = childNodeName;
      return this;
    }

    public void unsetChildNodeName() {
      this.childNodeName = null;
    }

    /** Returns true if field childNodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetChildNodeName() {
      return this.childNodeName != null;
    }

    public void setChildNodeNameIsSet(boolean value) {
      if (!value) {
        this.childNodeName = null;
      }
    }

    public String getNodeTypeName() {
      return this.nodeTypeName;
    }

    public canAddChildNodeWithType_args setNodeTypeName(String nodeTypeName) {
      this.nodeTypeName = nodeTypeName;
      return this;
    }

    public void unsetNodeTypeName() {
      this.nodeTypeName = null;
    }

    /** Returns true if field nodeTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeTypeName() {
      return this.nodeTypeName != null;
    }

    public void setNodeTypeNameIsSet(boolean value) {
      if (!value) {
        this.nodeTypeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((TNodeType)value);
        }
        break;

      case CHILD_NODE_NAME:
        if (value == null) {
          unsetChildNodeName();
        } else {
          setChildNodeName((String)value);
        }
        break;

      case NODE_TYPE_NAME:
        if (value == null) {
          unsetNodeTypeName();
        } else {
          setNodeTypeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_TYPE:
        return getNodeType();

      case CHILD_NODE_NAME:
        return getChildNodeName();

      case NODE_TYPE_NAME:
        return getNodeTypeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_TYPE:
        return isSetNodeType();
      case CHILD_NODE_NAME:
        return isSetChildNodeName();
      case NODE_TYPE_NAME:
        return isSetNodeTypeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canAddChildNodeWithType_args)
        return this.equals((canAddChildNodeWithType_args)that);
      return false;
    }

    public boolean equals(canAddChildNodeWithType_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      boolean this_present_childNodeName = true && this.isSetChildNodeName();
      boolean that_present_childNodeName = true && that.isSetChildNodeName();
      if (this_present_childNodeName || that_present_childNodeName) {
        if (!(this_present_childNodeName && that_present_childNodeName))
          return false;
        if (!this.childNodeName.equals(that.childNodeName))
          return false;
      }

      boolean this_present_nodeTypeName = true && this.isSetNodeTypeName();
      boolean that_present_nodeTypeName = true && that.isSetNodeTypeName();
      if (this_present_nodeTypeName || that_present_nodeTypeName) {
        if (!(this_present_nodeTypeName && that_present_nodeTypeName))
          return false;
        if (!this.nodeTypeName.equals(that.nodeTypeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeType = true && (isSetNodeType());
      list.add(present_nodeType);
      if (present_nodeType)
        list.add(nodeType);

      boolean present_childNodeName = true && (isSetChildNodeName());
      list.add(present_childNodeName);
      if (present_childNodeName)
        list.add(childNodeName);

      boolean present_nodeTypeName = true && (isSetNodeTypeName());
      list.add(present_nodeTypeName);
      if (present_nodeTypeName)
        list.add(nodeTypeName);

      return list.hashCode();
    }

    @Override
    public int compareTo(canAddChildNodeWithType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChildNodeName()).compareTo(other.isSetChildNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChildNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childNodeName, other.childNodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeTypeName()).compareTo(other.isSetNodeTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeTypeName, other.nodeTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canAddChildNodeWithType_args(");
      boolean first = true;

      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("childNodeName:");
      if (this.childNodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.childNodeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeTypeName:");
      if (this.nodeTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeTypeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeType != null) {
        nodeType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canAddChildNodeWithType_argsStandardSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithType_argsStandardScheme getScheme() {
        return new canAddChildNodeWithType_argsStandardScheme();
      }
    }

    private static class canAddChildNodeWithType_argsStandardScheme extends StandardScheme<canAddChildNodeWithType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canAddChildNodeWithType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeType = new TNodeType();
                struct.nodeType.read(iprot);
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHILD_NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.childNodeName = iprot.readString();
                struct.setChildNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeTypeName = iprot.readString();
                struct.setNodeTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canAddChildNodeWithType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          struct.nodeType.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.childNodeName != null) {
          oprot.writeFieldBegin(CHILD_NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.childNodeName);
          oprot.writeFieldEnd();
        }
        if (struct.nodeTypeName != null) {
          oprot.writeFieldBegin(NODE_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeTypeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canAddChildNodeWithType_argsTupleSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithType_argsTupleScheme getScheme() {
        return new canAddChildNodeWithType_argsTupleScheme();
      }
    }

    private static class canAddChildNodeWithType_argsTupleScheme extends TupleScheme<canAddChildNodeWithType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeType()) {
          optionals.set(0);
        }
        if (struct.isSetChildNodeName()) {
          optionals.set(1);
        }
        if (struct.isSetNodeTypeName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNodeType()) {
          struct.nodeType.write(oprot);
        }
        if (struct.isSetChildNodeName()) {
          oprot.writeString(struct.childNodeName);
        }
        if (struct.isSetNodeTypeName()) {
          oprot.writeString(struct.nodeTypeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nodeType = new TNodeType();
          struct.nodeType.read(iprot);
          struct.setNodeTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.childNodeName = iprot.readString();
          struct.setChildNodeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodeTypeName = iprot.readString();
          struct.setNodeTypeNameIsSet(true);
        }
      }
    }

  }

  public static class canAddChildNodeWithType_result implements org.apache.thrift.TBase<canAddChildNodeWithType_result, canAddChildNodeWithType_result._Fields>, java.io.Serializable, Cloneable, Comparable<canAddChildNodeWithType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canAddChildNodeWithType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canAddChildNodeWithType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canAddChildNodeWithType_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canAddChildNodeWithType_result.class, metaDataMap);
    }

    public canAddChildNodeWithType_result() {
    }

    public canAddChildNodeWithType_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canAddChildNodeWithType_result(canAddChildNodeWithType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public canAddChildNodeWithType_result deepCopy() {
      return new canAddChildNodeWithType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canAddChildNodeWithType_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canAddChildNodeWithType_result)
        return this.equals((canAddChildNodeWithType_result)that);
      return false;
    }

    public boolean equals(canAddChildNodeWithType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(canAddChildNodeWithType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canAddChildNodeWithType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canAddChildNodeWithType_resultStandardSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithType_resultStandardScheme getScheme() {
        return new canAddChildNodeWithType_resultStandardScheme();
      }
    }

    private static class canAddChildNodeWithType_resultStandardScheme extends StandardScheme<canAddChildNodeWithType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canAddChildNodeWithType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canAddChildNodeWithType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canAddChildNodeWithType_resultTupleSchemeFactory implements SchemeFactory {
      public canAddChildNodeWithType_resultTupleScheme getScheme() {
        return new canAddChildNodeWithType_resultTupleScheme();
      }
    }

    private static class canAddChildNodeWithType_resultTupleScheme extends TupleScheme<canAddChildNodeWithType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canAddChildNodeWithType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class canRemoveNode_args implements org.apache.thrift.TBase<canRemoveNode_args, canRemoveNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<canRemoveNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canRemoveNode_args");

    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canRemoveNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canRemoveNode_argsTupleSchemeFactory());
    }

    public TNodeType nodeType; // required
    public String nodeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_TYPE((short)1, "nodeType"),
      NODE_NAME((short)2, "nodeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_TYPE
            return NODE_TYPE;
          case 2: // NODE_NAME
            return NODE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeType.class)));
      tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canRemoveNode_args.class, metaDataMap);
    }

    public canRemoveNode_args() {
    }

    public canRemoveNode_args(
      TNodeType nodeType,
      String nodeName)
    {
      this();
      this.nodeType = nodeType;
      this.nodeName = nodeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canRemoveNode_args(canRemoveNode_args other) {
      if (other.isSetNodeType()) {
        this.nodeType = new TNodeType(other.nodeType);
      }
      if (other.isSetNodeName()) {
        this.nodeName = other.nodeName;
      }
    }

    public canRemoveNode_args deepCopy() {
      return new canRemoveNode_args(this);
    }

    @Override
    public void clear() {
      this.nodeType = null;
      this.nodeName = null;
    }

    public TNodeType getNodeType() {
      return this.nodeType;
    }

    public canRemoveNode_args setNodeType(TNodeType nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public String getNodeName() {
      return this.nodeName;
    }

    public canRemoveNode_args setNodeName(String nodeName) {
      this.nodeName = nodeName;
      return this;
    }

    public void unsetNodeName() {
      this.nodeName = null;
    }

    /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeName() {
      return this.nodeName != null;
    }

    public void setNodeNameIsSet(boolean value) {
      if (!value) {
        this.nodeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((TNodeType)value);
        }
        break;

      case NODE_NAME:
        if (value == null) {
          unsetNodeName();
        } else {
          setNodeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_TYPE:
        return getNodeType();

      case NODE_NAME:
        return getNodeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_TYPE:
        return isSetNodeType();
      case NODE_NAME:
        return isSetNodeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canRemoveNode_args)
        return this.equals((canRemoveNode_args)that);
      return false;
    }

    public boolean equals(canRemoveNode_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      boolean this_present_nodeName = true && this.isSetNodeName();
      boolean that_present_nodeName = true && that.isSetNodeName();
      if (this_present_nodeName || that_present_nodeName) {
        if (!(this_present_nodeName && that_present_nodeName))
          return false;
        if (!this.nodeName.equals(that.nodeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeType = true && (isSetNodeType());
      list.add(present_nodeType);
      if (present_nodeType)
        list.add(nodeType);

      boolean present_nodeName = true && (isSetNodeName());
      list.add(present_nodeName);
      if (present_nodeName)
        list.add(nodeName);

      return list.hashCode();
    }

    @Override
    public int compareTo(canRemoveNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canRemoveNode_args(");
      boolean first = true;

      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeName:");
      if (this.nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeType != null) {
        nodeType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canRemoveNode_argsStandardSchemeFactory implements SchemeFactory {
      public canRemoveNode_argsStandardScheme getScheme() {
        return new canRemoveNode_argsStandardScheme();
      }
    }

    private static class canRemoveNode_argsStandardScheme extends StandardScheme<canRemoveNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canRemoveNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeType = new TNodeType();
                struct.nodeType.read(iprot);
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeName = iprot.readString();
                struct.setNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canRemoveNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          struct.nodeType.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nodeName != null) {
          oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canRemoveNode_argsTupleSchemeFactory implements SchemeFactory {
      public canRemoveNode_argsTupleScheme getScheme() {
        return new canRemoveNode_argsTupleScheme();
      }
    }

    private static class canRemoveNode_argsTupleScheme extends TupleScheme<canRemoveNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canRemoveNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeType()) {
          optionals.set(0);
        }
        if (struct.isSetNodeName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeType()) {
          struct.nodeType.write(oprot);
        }
        if (struct.isSetNodeName()) {
          oprot.writeString(struct.nodeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canRemoveNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeType = new TNodeType();
          struct.nodeType.read(iprot);
          struct.setNodeTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeName = iprot.readString();
          struct.setNodeNameIsSet(true);
        }
      }
    }

  }

  public static class canRemoveNode_result implements org.apache.thrift.TBase<canRemoveNode_result, canRemoveNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<canRemoveNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canRemoveNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canRemoveNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canRemoveNode_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canRemoveNode_result.class, metaDataMap);
    }

    public canRemoveNode_result() {
    }

    public canRemoveNode_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canRemoveNode_result(canRemoveNode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public canRemoveNode_result deepCopy() {
      return new canRemoveNode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canRemoveNode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canRemoveNode_result)
        return this.equals((canRemoveNode_result)that);
      return false;
    }

    public boolean equals(canRemoveNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(canRemoveNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canRemoveNode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canRemoveNode_resultStandardSchemeFactory implements SchemeFactory {
      public canRemoveNode_resultStandardScheme getScheme() {
        return new canRemoveNode_resultStandardScheme();
      }
    }

    private static class canRemoveNode_resultStandardScheme extends StandardScheme<canRemoveNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canRemoveNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canRemoveNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canRemoveNode_resultTupleSchemeFactory implements SchemeFactory {
      public canRemoveNode_resultTupleScheme getScheme() {
        return new canRemoveNode_resultTupleScheme();
      }
    }

    private static class canRemoveNode_resultTupleScheme extends TupleScheme<canRemoveNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canRemoveNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canRemoveNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isNodeType_args implements org.apache.thrift.TBase<isNodeType_args, isNodeType_args._Fields>, java.io.Serializable, Cloneable, Comparable<isNodeType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isNodeType_args");

    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeTypeName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isNodeType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isNodeType_argsTupleSchemeFactory());
    }

    public TNodeType nodeType; // required
    public String nodeTypeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_TYPE((short)1, "nodeType"),
      NODE_TYPE_NAME((short)2, "nodeTypeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_TYPE
            return NODE_TYPE;
          case 2: // NODE_TYPE_NAME
            return NODE_TYPE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeType.class)));
      tmpMap.put(_Fields.NODE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isNodeType_args.class, metaDataMap);
    }

    public isNodeType_args() {
    }

    public isNodeType_args(
      TNodeType nodeType,
      String nodeTypeName)
    {
      this();
      this.nodeType = nodeType;
      this.nodeTypeName = nodeTypeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isNodeType_args(isNodeType_args other) {
      if (other.isSetNodeType()) {
        this.nodeType = new TNodeType(other.nodeType);
      }
      if (other.isSetNodeTypeName()) {
        this.nodeTypeName = other.nodeTypeName;
      }
    }

    public isNodeType_args deepCopy() {
      return new isNodeType_args(this);
    }

    @Override
    public void clear() {
      this.nodeType = null;
      this.nodeTypeName = null;
    }

    public TNodeType getNodeType() {
      return this.nodeType;
    }

    public isNodeType_args setNodeType(TNodeType nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public String getNodeTypeName() {
      return this.nodeTypeName;
    }

    public isNodeType_args setNodeTypeName(String nodeTypeName) {
      this.nodeTypeName = nodeTypeName;
      return this;
    }

    public void unsetNodeTypeName() {
      this.nodeTypeName = null;
    }

    /** Returns true if field nodeTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeTypeName() {
      return this.nodeTypeName != null;
    }

    public void setNodeTypeNameIsSet(boolean value) {
      if (!value) {
        this.nodeTypeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((TNodeType)value);
        }
        break;

      case NODE_TYPE_NAME:
        if (value == null) {
          unsetNodeTypeName();
        } else {
          setNodeTypeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_TYPE:
        return getNodeType();

      case NODE_TYPE_NAME:
        return getNodeTypeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_TYPE:
        return isSetNodeType();
      case NODE_TYPE_NAME:
        return isSetNodeTypeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isNodeType_args)
        return this.equals((isNodeType_args)that);
      return false;
    }

    public boolean equals(isNodeType_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      boolean this_present_nodeTypeName = true && this.isSetNodeTypeName();
      boolean that_present_nodeTypeName = true && that.isSetNodeTypeName();
      if (this_present_nodeTypeName || that_present_nodeTypeName) {
        if (!(this_present_nodeTypeName && that_present_nodeTypeName))
          return false;
        if (!this.nodeTypeName.equals(that.nodeTypeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeType = true && (isSetNodeType());
      list.add(present_nodeType);
      if (present_nodeType)
        list.add(nodeType);

      boolean present_nodeTypeName = true && (isSetNodeTypeName());
      list.add(present_nodeTypeName);
      if (present_nodeTypeName)
        list.add(nodeTypeName);

      return list.hashCode();
    }

    @Override
    public int compareTo(isNodeType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeTypeName()).compareTo(other.isSetNodeTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeTypeName, other.nodeTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isNodeType_args(");
      boolean first = true;

      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeTypeName:");
      if (this.nodeTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeTypeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeType != null) {
        nodeType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isNodeType_argsStandardSchemeFactory implements SchemeFactory {
      public isNodeType_argsStandardScheme getScheme() {
        return new isNodeType_argsStandardScheme();
      }
    }

    private static class isNodeType_argsStandardScheme extends StandardScheme<isNodeType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isNodeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeType = new TNodeType();
                struct.nodeType.read(iprot);
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeTypeName = iprot.readString();
                struct.setNodeTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isNodeType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          struct.nodeType.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nodeTypeName != null) {
          oprot.writeFieldBegin(NODE_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeTypeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isNodeType_argsTupleSchemeFactory implements SchemeFactory {
      public isNodeType_argsTupleScheme getScheme() {
        return new isNodeType_argsTupleScheme();
      }
    }

    private static class isNodeType_argsTupleScheme extends TupleScheme<isNodeType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isNodeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeType()) {
          optionals.set(0);
        }
        if (struct.isSetNodeTypeName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeType()) {
          struct.nodeType.write(oprot);
        }
        if (struct.isSetNodeTypeName()) {
          oprot.writeString(struct.nodeTypeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isNodeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeType = new TNodeType();
          struct.nodeType.read(iprot);
          struct.setNodeTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeTypeName = iprot.readString();
          struct.setNodeTypeNameIsSet(true);
        }
      }
    }

  }

  public static class isNodeType_result implements org.apache.thrift.TBase<isNodeType_result, isNodeType_result._Fields>, java.io.Serializable, Cloneable, Comparable<isNodeType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isNodeType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isNodeType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isNodeType_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isNodeType_result.class, metaDataMap);
    }

    public isNodeType_result() {
    }

    public isNodeType_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isNodeType_result(isNodeType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isNodeType_result deepCopy() {
      return new isNodeType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isNodeType_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isNodeType_result)
        return this.equals((isNodeType_result)that);
      return false;
    }

    public boolean equals(isNodeType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isNodeType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isNodeType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isNodeType_resultStandardSchemeFactory implements SchemeFactory {
      public isNodeType_resultStandardScheme getScheme() {
        return new isNodeType_resultStandardScheme();
      }
    }

    private static class isNodeType_resultStandardScheme extends StandardScheme<isNodeType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isNodeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isNodeType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isNodeType_resultTupleSchemeFactory implements SchemeFactory {
      public isNodeType_resultTupleScheme getScheme() {
        return new isNodeType_resultTupleScheme();
      }
    }

    private static class isNodeType_resultTupleScheme extends TupleScheme<isNodeType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isNodeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isNodeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
