/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jumlabs.jcr.oak.rpc.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-6-12")
public class TPropertyStateService {

  public interface Iface {

    public TType getType(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<ByteBuffer> getBinaryValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public ByteBuffer getBinaryValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<Long> getLongValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public long getLongValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<Boolean> getBooleanValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public boolean getBooleanValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<Long> getDateValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public long getDateValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public double getDoubleValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<String> getNameValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public String getNameValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<String> getPathValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public String getPathValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<String> getStringValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public String getStringValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public List<String> getURIValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

    public String getURIValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getType(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBinaryValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBinaryValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLongValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLongValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBooleanValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBooleanValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDateValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDateValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDoubleValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNameValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNameValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPathValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPathValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStringValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStringValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getURIValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getURIValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TType getType(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getType(tree, property);
      return recv_getType();
    }

    public void send_getType(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getType_args args = new getType_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getType", args);
    }

    public TType recv_getType() throws org.apache.thrift.TException
    {
      getType_result result = new getType_result();
      receiveBase(result, "getType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getType failed: unknown result");
    }

    public List<ByteBuffer> getBinaryValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getBinaryValues(tree, property);
      return recv_getBinaryValues();
    }

    public void send_getBinaryValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getBinaryValues_args args = new getBinaryValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getBinaryValues", args);
    }

    public List<ByteBuffer> recv_getBinaryValues() throws org.apache.thrift.TException
    {
      getBinaryValues_result result = new getBinaryValues_result();
      receiveBase(result, "getBinaryValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBinaryValues failed: unknown result");
    }

    public ByteBuffer getBinaryValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getBinaryValue(tree, property);
      return recv_getBinaryValue();
    }

    public void send_getBinaryValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getBinaryValue_args args = new getBinaryValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getBinaryValue", args);
    }

    public ByteBuffer recv_getBinaryValue() throws org.apache.thrift.TException
    {
      getBinaryValue_result result = new getBinaryValue_result();
      receiveBase(result, "getBinaryValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBinaryValue failed: unknown result");
    }

    public List<Long> getLongValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getLongValues(tree, property);
      return recv_getLongValues();
    }

    public void send_getLongValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getLongValues_args args = new getLongValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getLongValues", args);
    }

    public List<Long> recv_getLongValues() throws org.apache.thrift.TException
    {
      getLongValues_result result = new getLongValues_result();
      receiveBase(result, "getLongValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLongValues failed: unknown result");
    }

    public long getLongValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getLongValue(tree, property);
      return recv_getLongValue();
    }

    public void send_getLongValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getLongValue_args args = new getLongValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getLongValue", args);
    }

    public long recv_getLongValue() throws org.apache.thrift.TException
    {
      getLongValue_result result = new getLongValue_result();
      receiveBase(result, "getLongValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLongValue failed: unknown result");
    }

    public List<Boolean> getBooleanValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getBooleanValues(tree, property);
      return recv_getBooleanValues();
    }

    public void send_getBooleanValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getBooleanValues_args args = new getBooleanValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getBooleanValues", args);
    }

    public List<Boolean> recv_getBooleanValues() throws org.apache.thrift.TException
    {
      getBooleanValues_result result = new getBooleanValues_result();
      receiveBase(result, "getBooleanValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBooleanValues failed: unknown result");
    }

    public boolean getBooleanValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getBooleanValue(tree, property);
      return recv_getBooleanValue();
    }

    public void send_getBooleanValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getBooleanValue_args args = new getBooleanValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getBooleanValue", args);
    }

    public boolean recv_getBooleanValue() throws org.apache.thrift.TException
    {
      getBooleanValue_result result = new getBooleanValue_result();
      receiveBase(result, "getBooleanValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBooleanValue failed: unknown result");
    }

    public List<Long> getDateValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getDateValues(tree, property);
      return recv_getDateValues();
    }

    public void send_getDateValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getDateValues_args args = new getDateValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getDateValues", args);
    }

    public List<Long> recv_getDateValues() throws org.apache.thrift.TException
    {
      getDateValues_result result = new getDateValues_result();
      receiveBase(result, "getDateValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDateValues failed: unknown result");
    }

    public long getDateValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getDateValue(tree, property);
      return recv_getDateValue();
    }

    public void send_getDateValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getDateValue_args args = new getDateValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getDateValue", args);
    }

    public long recv_getDateValue() throws org.apache.thrift.TException
    {
      getDateValue_result result = new getDateValue_result();
      receiveBase(result, "getDateValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDateValue failed: unknown result");
    }

    public double getDoubleValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getDoubleValue(tree, property);
      return recv_getDoubleValue();
    }

    public void send_getDoubleValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getDoubleValue_args args = new getDoubleValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getDoubleValue", args);
    }

    public double recv_getDoubleValue() throws org.apache.thrift.TException
    {
      getDoubleValue_result result = new getDoubleValue_result();
      receiveBase(result, "getDoubleValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDoubleValue failed: unknown result");
    }

    public List<String> getNameValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getNameValues(tree, property);
      return recv_getNameValues();
    }

    public void send_getNameValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getNameValues_args args = new getNameValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getNameValues", args);
    }

    public List<String> recv_getNameValues() throws org.apache.thrift.TException
    {
      getNameValues_result result = new getNameValues_result();
      receiveBase(result, "getNameValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNameValues failed: unknown result");
    }

    public String getNameValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getNameValue(tree, property);
      return recv_getNameValue();
    }

    public void send_getNameValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getNameValue_args args = new getNameValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getNameValue", args);
    }

    public String recv_getNameValue() throws org.apache.thrift.TException
    {
      getNameValue_result result = new getNameValue_result();
      receiveBase(result, "getNameValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNameValue failed: unknown result");
    }

    public List<String> getPathValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getPathValues(tree, property);
      return recv_getPathValues();
    }

    public void send_getPathValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getPathValues_args args = new getPathValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getPathValues", args);
    }

    public List<String> recv_getPathValues() throws org.apache.thrift.TException
    {
      getPathValues_result result = new getPathValues_result();
      receiveBase(result, "getPathValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPathValues failed: unknown result");
    }

    public String getPathValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getPathValue(tree, property);
      return recv_getPathValue();
    }

    public void send_getPathValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getPathValue_args args = new getPathValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getPathValue", args);
    }

    public String recv_getPathValue() throws org.apache.thrift.TException
    {
      getPathValue_result result = new getPathValue_result();
      receiveBase(result, "getPathValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPathValue failed: unknown result");
    }

    public List<String> getStringValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getStringValues(tree, property);
      return recv_getStringValues();
    }

    public void send_getStringValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getStringValues_args args = new getStringValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getStringValues", args);
    }

    public List<String> recv_getStringValues() throws org.apache.thrift.TException
    {
      getStringValues_result result = new getStringValues_result();
      receiveBase(result, "getStringValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStringValues failed: unknown result");
    }

    public String getStringValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getStringValue(tree, property);
      return recv_getStringValue();
    }

    public void send_getStringValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getStringValue_args args = new getStringValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getStringValue", args);
    }

    public String recv_getStringValue() throws org.apache.thrift.TException
    {
      getStringValue_result result = new getStringValue_result();
      receiveBase(result, "getStringValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStringValue failed: unknown result");
    }

    public List<String> getURIValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getURIValues(tree, property);
      return recv_getURIValues();
    }

    public void send_getURIValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getURIValues_args args = new getURIValues_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getURIValues", args);
    }

    public List<String> recv_getURIValues() throws org.apache.thrift.TException
    {
      getURIValues_result result = new getURIValues_result();
      receiveBase(result, "getURIValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getURIValues failed: unknown result");
    }

    public String getURIValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      send_getURIValue(tree, property);
      return recv_getURIValue();
    }

    public void send_getURIValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property) throws org.apache.thrift.TException
    {
      getURIValue_args args = new getURIValue_args();
      args.setTree(tree);
      args.setProperty(property);
      sendBase("getURIValue", args);
    }

    public String recv_getURIValue() throws org.apache.thrift.TException
    {
      getURIValue_result result = new getURIValue_result();
      receiveBase(result, "getURIValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getURIValue failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getType(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getType_call method_call = new getType_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getType_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getType_args args = new getType_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getType();
      }
    }

    public void getBinaryValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBinaryValues_call method_call = new getBinaryValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBinaryValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getBinaryValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBinaryValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBinaryValues_args args = new getBinaryValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ByteBuffer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBinaryValues();
      }
    }

    public void getBinaryValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBinaryValue_call method_call = new getBinaryValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBinaryValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getBinaryValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBinaryValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBinaryValue_args args = new getBinaryValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBinaryValue();
      }
    }

    public void getLongValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLongValues_call method_call = new getLongValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLongValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getLongValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLongValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLongValues_args args = new getLongValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLongValues();
      }
    }

    public void getLongValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLongValue_call method_call = new getLongValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLongValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getLongValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLongValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLongValue_args args = new getLongValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLongValue();
      }
    }

    public void getBooleanValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBooleanValues_call method_call = new getBooleanValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBooleanValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getBooleanValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBooleanValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBooleanValues_args args = new getBooleanValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Boolean> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBooleanValues();
      }
    }

    public void getBooleanValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBooleanValue_call method_call = new getBooleanValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBooleanValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getBooleanValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBooleanValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBooleanValue_args args = new getBooleanValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBooleanValue();
      }
    }

    public void getDateValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDateValues_call method_call = new getDateValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDateValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getDateValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDateValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDateValues_args args = new getDateValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDateValues();
      }
    }

    public void getDateValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDateValue_call method_call = new getDateValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDateValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getDateValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDateValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDateValue_args args = new getDateValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDateValue();
      }
    }

    public void getDoubleValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDoubleValue_call method_call = new getDoubleValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDoubleValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getDoubleValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDoubleValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDoubleValue_args args = new getDoubleValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDoubleValue();
      }
    }

    public void getNameValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNameValues_call method_call = new getNameValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNameValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getNameValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNameValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNameValues_args args = new getNameValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNameValues();
      }
    }

    public void getNameValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNameValue_call method_call = new getNameValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNameValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getNameValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNameValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNameValue_args args = new getNameValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNameValue();
      }
    }

    public void getPathValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPathValues_call method_call = new getPathValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPathValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getPathValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPathValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPathValues_args args = new getPathValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPathValues();
      }
    }

    public void getPathValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPathValue_call method_call = new getPathValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPathValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getPathValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPathValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPathValue_args args = new getPathValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPathValue();
      }
    }

    public void getStringValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStringValues_call method_call = new getStringValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStringValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getStringValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStringValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStringValues_args args = new getStringValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStringValues();
      }
    }

    public void getStringValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStringValue_call method_call = new getStringValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStringValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getStringValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStringValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStringValue_args args = new getStringValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStringValue();
      }
    }

    public void getURIValues(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getURIValues_call method_call = new getURIValues_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getURIValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getURIValues_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getURIValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getURIValues_args args = new getURIValues_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getURIValues();
      }
    }

    public void getURIValue(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getURIValue_call method_call = new getURIValue_call(tree, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getURIValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.jumlabs.jcr.oak.rpc.api.TTree tree;
      private TPropertyState property;
      public getURIValue_call(org.jumlabs.jcr.oak.rpc.api.TTree tree, TPropertyState property, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getURIValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getURIValue_args args = new getURIValue_args();
        args.setTree(tree);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getURIValue();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getType", new getType());
      processMap.put("getBinaryValues", new getBinaryValues());
      processMap.put("getBinaryValue", new getBinaryValue());
      processMap.put("getLongValues", new getLongValues());
      processMap.put("getLongValue", new getLongValue());
      processMap.put("getBooleanValues", new getBooleanValues());
      processMap.put("getBooleanValue", new getBooleanValue());
      processMap.put("getDateValues", new getDateValues());
      processMap.put("getDateValue", new getDateValue());
      processMap.put("getDoubleValue", new getDoubleValue());
      processMap.put("getNameValues", new getNameValues());
      processMap.put("getNameValue", new getNameValue());
      processMap.put("getPathValues", new getPathValues());
      processMap.put("getPathValue", new getPathValue());
      processMap.put("getStringValues", new getStringValues());
      processMap.put("getStringValue", new getStringValue());
      processMap.put("getURIValues", new getURIValues());
      processMap.put("getURIValue", new getURIValue());
      return processMap;
    }

    public static class getType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getType_args> {
      public getType() {
        super("getType");
      }

      public getType_args getEmptyArgsInstance() {
        return new getType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getType_result getResult(I iface, getType_args args) throws org.apache.thrift.TException {
        getType_result result = new getType_result();
        result.success = iface.getType(args.tree, args.property);
        return result;
      }
    }

    public static class getBinaryValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBinaryValues_args> {
      public getBinaryValues() {
        super("getBinaryValues");
      }

      public getBinaryValues_args getEmptyArgsInstance() {
        return new getBinaryValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBinaryValues_result getResult(I iface, getBinaryValues_args args) throws org.apache.thrift.TException {
        getBinaryValues_result result = new getBinaryValues_result();
        result.success = iface.getBinaryValues(args.tree, args.property);
        return result;
      }
    }

    public static class getBinaryValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBinaryValue_args> {
      public getBinaryValue() {
        super("getBinaryValue");
      }

      public getBinaryValue_args getEmptyArgsInstance() {
        return new getBinaryValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBinaryValue_result getResult(I iface, getBinaryValue_args args) throws org.apache.thrift.TException {
        getBinaryValue_result result = new getBinaryValue_result();
        result.success = iface.getBinaryValue(args.tree, args.property);
        return result;
      }
    }

    public static class getLongValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLongValues_args> {
      public getLongValues() {
        super("getLongValues");
      }

      public getLongValues_args getEmptyArgsInstance() {
        return new getLongValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLongValues_result getResult(I iface, getLongValues_args args) throws org.apache.thrift.TException {
        getLongValues_result result = new getLongValues_result();
        result.success = iface.getLongValues(args.tree, args.property);
        return result;
      }
    }

    public static class getLongValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLongValue_args> {
      public getLongValue() {
        super("getLongValue");
      }

      public getLongValue_args getEmptyArgsInstance() {
        return new getLongValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLongValue_result getResult(I iface, getLongValue_args args) throws org.apache.thrift.TException {
        getLongValue_result result = new getLongValue_result();
        result.success = iface.getLongValue(args.tree, args.property);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBooleanValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBooleanValues_args> {
      public getBooleanValues() {
        super("getBooleanValues");
      }

      public getBooleanValues_args getEmptyArgsInstance() {
        return new getBooleanValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBooleanValues_result getResult(I iface, getBooleanValues_args args) throws org.apache.thrift.TException {
        getBooleanValues_result result = new getBooleanValues_result();
        result.success = iface.getBooleanValues(args.tree, args.property);
        return result;
      }
    }

    public static class getBooleanValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBooleanValue_args> {
      public getBooleanValue() {
        super("getBooleanValue");
      }

      public getBooleanValue_args getEmptyArgsInstance() {
        return new getBooleanValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBooleanValue_result getResult(I iface, getBooleanValue_args args) throws org.apache.thrift.TException {
        getBooleanValue_result result = new getBooleanValue_result();
        result.success = iface.getBooleanValue(args.tree, args.property);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDateValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDateValues_args> {
      public getDateValues() {
        super("getDateValues");
      }

      public getDateValues_args getEmptyArgsInstance() {
        return new getDateValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDateValues_result getResult(I iface, getDateValues_args args) throws org.apache.thrift.TException {
        getDateValues_result result = new getDateValues_result();
        result.success = iface.getDateValues(args.tree, args.property);
        return result;
      }
    }

    public static class getDateValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDateValue_args> {
      public getDateValue() {
        super("getDateValue");
      }

      public getDateValue_args getEmptyArgsInstance() {
        return new getDateValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDateValue_result getResult(I iface, getDateValue_args args) throws org.apache.thrift.TException {
        getDateValue_result result = new getDateValue_result();
        result.success = iface.getDateValue(args.tree, args.property);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDoubleValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDoubleValue_args> {
      public getDoubleValue() {
        super("getDoubleValue");
      }

      public getDoubleValue_args getEmptyArgsInstance() {
        return new getDoubleValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDoubleValue_result getResult(I iface, getDoubleValue_args args) throws org.apache.thrift.TException {
        getDoubleValue_result result = new getDoubleValue_result();
        result.success = iface.getDoubleValue(args.tree, args.property);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNameValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNameValues_args> {
      public getNameValues() {
        super("getNameValues");
      }

      public getNameValues_args getEmptyArgsInstance() {
        return new getNameValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNameValues_result getResult(I iface, getNameValues_args args) throws org.apache.thrift.TException {
        getNameValues_result result = new getNameValues_result();
        result.success = iface.getNameValues(args.tree, args.property);
        return result;
      }
    }

    public static class getNameValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNameValue_args> {
      public getNameValue() {
        super("getNameValue");
      }

      public getNameValue_args getEmptyArgsInstance() {
        return new getNameValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNameValue_result getResult(I iface, getNameValue_args args) throws org.apache.thrift.TException {
        getNameValue_result result = new getNameValue_result();
        result.success = iface.getNameValue(args.tree, args.property);
        return result;
      }
    }

    public static class getPathValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPathValues_args> {
      public getPathValues() {
        super("getPathValues");
      }

      public getPathValues_args getEmptyArgsInstance() {
        return new getPathValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPathValues_result getResult(I iface, getPathValues_args args) throws org.apache.thrift.TException {
        getPathValues_result result = new getPathValues_result();
        result.success = iface.getPathValues(args.tree, args.property);
        return result;
      }
    }

    public static class getPathValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPathValue_args> {
      public getPathValue() {
        super("getPathValue");
      }

      public getPathValue_args getEmptyArgsInstance() {
        return new getPathValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPathValue_result getResult(I iface, getPathValue_args args) throws org.apache.thrift.TException {
        getPathValue_result result = new getPathValue_result();
        result.success = iface.getPathValue(args.tree, args.property);
        return result;
      }
    }

    public static class getStringValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStringValues_args> {
      public getStringValues() {
        super("getStringValues");
      }

      public getStringValues_args getEmptyArgsInstance() {
        return new getStringValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStringValues_result getResult(I iface, getStringValues_args args) throws org.apache.thrift.TException {
        getStringValues_result result = new getStringValues_result();
        result.success = iface.getStringValues(args.tree, args.property);
        return result;
      }
    }

    public static class getStringValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStringValue_args> {
      public getStringValue() {
        super("getStringValue");
      }

      public getStringValue_args getEmptyArgsInstance() {
        return new getStringValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStringValue_result getResult(I iface, getStringValue_args args) throws org.apache.thrift.TException {
        getStringValue_result result = new getStringValue_result();
        result.success = iface.getStringValue(args.tree, args.property);
        return result;
      }
    }

    public static class getURIValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getURIValues_args> {
      public getURIValues() {
        super("getURIValues");
      }

      public getURIValues_args getEmptyArgsInstance() {
        return new getURIValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getURIValues_result getResult(I iface, getURIValues_args args) throws org.apache.thrift.TException {
        getURIValues_result result = new getURIValues_result();
        result.success = iface.getURIValues(args.tree, args.property);
        return result;
      }
    }

    public static class getURIValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getURIValue_args> {
      public getURIValue() {
        super("getURIValue");
      }

      public getURIValue_args getEmptyArgsInstance() {
        return new getURIValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getURIValue_result getResult(I iface, getURIValue_args args) throws org.apache.thrift.TException {
        getURIValue_result result = new getURIValue_result();
        result.success = iface.getURIValue(args.tree, args.property);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getType", new getType());
      processMap.put("getBinaryValues", new getBinaryValues());
      processMap.put("getBinaryValue", new getBinaryValue());
      processMap.put("getLongValues", new getLongValues());
      processMap.put("getLongValue", new getLongValue());
      processMap.put("getBooleanValues", new getBooleanValues());
      processMap.put("getBooleanValue", new getBooleanValue());
      processMap.put("getDateValues", new getDateValues());
      processMap.put("getDateValue", new getDateValue());
      processMap.put("getDoubleValue", new getDoubleValue());
      processMap.put("getNameValues", new getNameValues());
      processMap.put("getNameValue", new getNameValue());
      processMap.put("getPathValues", new getPathValues());
      processMap.put("getPathValue", new getPathValue());
      processMap.put("getStringValues", new getStringValues());
      processMap.put("getStringValue", new getStringValue());
      processMap.put("getURIValues", new getURIValues());
      processMap.put("getURIValue", new getURIValue());
      return processMap;
    }

    public static class getType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getType_args, TType> {
      public getType() {
        super("getType");
      }

      public getType_args getEmptyArgsInstance() {
        return new getType_args();
      }

      public AsyncMethodCallback<TType> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TType>() { 
          public void onComplete(TType o) {
            getType_result result = new getType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getType_result result = new getType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getType_args args, org.apache.thrift.async.AsyncMethodCallback<TType> resultHandler) throws TException {
        iface.getType(args.tree, args.property,resultHandler);
      }
    }

    public static class getBinaryValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBinaryValues_args, List<ByteBuffer>> {
      public getBinaryValues() {
        super("getBinaryValues");
      }

      public getBinaryValues_args getEmptyArgsInstance() {
        return new getBinaryValues_args();
      }

      public AsyncMethodCallback<List<ByteBuffer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ByteBuffer>>() { 
          public void onComplete(List<ByteBuffer> o) {
            getBinaryValues_result result = new getBinaryValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBinaryValues_result result = new getBinaryValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBinaryValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<ByteBuffer>> resultHandler) throws TException {
        iface.getBinaryValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getBinaryValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBinaryValue_args, ByteBuffer> {
      public getBinaryValue() {
        super("getBinaryValue");
      }

      public getBinaryValue_args getEmptyArgsInstance() {
        return new getBinaryValue_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            getBinaryValue_result result = new getBinaryValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBinaryValue_result result = new getBinaryValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBinaryValue_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.getBinaryValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getLongValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLongValues_args, List<Long>> {
      public getLongValues() {
        super("getLongValues");
      }

      public getLongValues_args getEmptyArgsInstance() {
        return new getLongValues_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getLongValues_result result = new getLongValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLongValues_result result = new getLongValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLongValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getLongValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getLongValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLongValue_args, Long> {
      public getLongValue() {
        super("getLongValue");
      }

      public getLongValue_args getEmptyArgsInstance() {
        return new getLongValue_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getLongValue_result result = new getLongValue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLongValue_result result = new getLongValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLongValue_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getLongValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getBooleanValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBooleanValues_args, List<Boolean>> {
      public getBooleanValues() {
        super("getBooleanValues");
      }

      public getBooleanValues_args getEmptyArgsInstance() {
        return new getBooleanValues_args();
      }

      public AsyncMethodCallback<List<Boolean>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Boolean>>() { 
          public void onComplete(List<Boolean> o) {
            getBooleanValues_result result = new getBooleanValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBooleanValues_result result = new getBooleanValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBooleanValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<Boolean>> resultHandler) throws TException {
        iface.getBooleanValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getBooleanValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBooleanValue_args, Boolean> {
      public getBooleanValue() {
        super("getBooleanValue");
      }

      public getBooleanValue_args getEmptyArgsInstance() {
        return new getBooleanValue_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            getBooleanValue_result result = new getBooleanValue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBooleanValue_result result = new getBooleanValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBooleanValue_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.getBooleanValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getDateValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDateValues_args, List<Long>> {
      public getDateValues() {
        super("getDateValues");
      }

      public getDateValues_args getEmptyArgsInstance() {
        return new getDateValues_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getDateValues_result result = new getDateValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDateValues_result result = new getDateValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDateValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getDateValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getDateValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDateValue_args, Long> {
      public getDateValue() {
        super("getDateValue");
      }

      public getDateValue_args getEmptyArgsInstance() {
        return new getDateValue_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getDateValue_result result = new getDateValue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDateValue_result result = new getDateValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDateValue_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getDateValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getDoubleValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDoubleValue_args, Double> {
      public getDoubleValue() {
        super("getDoubleValue");
      }

      public getDoubleValue_args getEmptyArgsInstance() {
        return new getDoubleValue_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getDoubleValue_result result = new getDoubleValue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDoubleValue_result result = new getDoubleValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDoubleValue_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getDoubleValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getNameValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNameValues_args, List<String>> {
      public getNameValues() {
        super("getNameValues");
      }

      public getNameValues_args getEmptyArgsInstance() {
        return new getNameValues_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getNameValues_result result = new getNameValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNameValues_result result = new getNameValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNameValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getNameValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getNameValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNameValue_args, String> {
      public getNameValue() {
        super("getNameValue");
      }

      public getNameValue_args getEmptyArgsInstance() {
        return new getNameValue_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getNameValue_result result = new getNameValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNameValue_result result = new getNameValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNameValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getNameValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getPathValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPathValues_args, List<String>> {
      public getPathValues() {
        super("getPathValues");
      }

      public getPathValues_args getEmptyArgsInstance() {
        return new getPathValues_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getPathValues_result result = new getPathValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPathValues_result result = new getPathValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPathValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getPathValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getPathValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPathValue_args, String> {
      public getPathValue() {
        super("getPathValue");
      }

      public getPathValue_args getEmptyArgsInstance() {
        return new getPathValue_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getPathValue_result result = new getPathValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPathValue_result result = new getPathValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPathValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getPathValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getStringValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStringValues_args, List<String>> {
      public getStringValues() {
        super("getStringValues");
      }

      public getStringValues_args getEmptyArgsInstance() {
        return new getStringValues_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getStringValues_result result = new getStringValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStringValues_result result = new getStringValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStringValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getStringValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getStringValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStringValue_args, String> {
      public getStringValue() {
        super("getStringValue");
      }

      public getStringValue_args getEmptyArgsInstance() {
        return new getStringValue_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStringValue_result result = new getStringValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStringValue_result result = new getStringValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStringValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStringValue(args.tree, args.property,resultHandler);
      }
    }

    public static class getURIValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getURIValues_args, List<String>> {
      public getURIValues() {
        super("getURIValues");
      }

      public getURIValues_args getEmptyArgsInstance() {
        return new getURIValues_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getURIValues_result result = new getURIValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getURIValues_result result = new getURIValues_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getURIValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getURIValues(args.tree, args.property,resultHandler);
      }
    }

    public static class getURIValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getURIValue_args, String> {
      public getURIValue() {
        super("getURIValue");
      }

      public getURIValue_args getEmptyArgsInstance() {
        return new getURIValue_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getURIValue_result result = new getURIValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getURIValue_result result = new getURIValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getURIValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getURIValue(args.tree, args.property,resultHandler);
      }
    }

  }

  public static class getType_args implements org.apache.thrift.TBase<getType_args, getType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getType_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getType_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getType_args.class, metaDataMap);
    }

    public getType_args() {
    }

    public getType_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getType_args(getType_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getType_args deepCopy() {
      return new getType_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getType_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getType_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getType_args)
        return this.equals((getType_args)that);
      return false;
    }

    public boolean equals(getType_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getType_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getType_argsStandardSchemeFactory implements SchemeFactory {
      public getType_argsStandardScheme getScheme() {
        return new getType_argsStandardScheme();
      }
    }

    private static class getType_argsStandardScheme extends StandardScheme<getType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getType_argsTupleSchemeFactory implements SchemeFactory {
      public getType_argsTupleScheme getScheme() {
        return new getType_argsTupleScheme();
      }
    }

    private static class getType_argsTupleScheme extends TupleScheme<getType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getType_result implements org.apache.thrift.TBase<getType_result, getType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getType_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TType
     */
    public TType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TType
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getType_result.class, metaDataMap);
    }

    public getType_result() {
    }

    public getType_result(
      TType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getType_result(getType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getType_result deepCopy() {
      return new getType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TType
     */
    public TType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TType
     */
    public getType_result setSuccess(TType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getType_result)
        return this.equals((getType_result)that);
      return false;
    }

    public boolean equals(getType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getType_resultStandardSchemeFactory implements SchemeFactory {
      public getType_resultStandardScheme getScheme() {
        return new getType_resultStandardScheme();
      }
    }

    private static class getType_resultStandardScheme extends StandardScheme<getType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = org.jumlabs.jcr.oak.rpc.api.TType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getType_resultTupleSchemeFactory implements SchemeFactory {
      public getType_resultTupleScheme getScheme() {
        return new getType_resultTupleScheme();
      }
    }

    private static class getType_resultTupleScheme extends TupleScheme<getType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = org.jumlabs.jcr.oak.rpc.api.TType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBinaryValues_args implements org.apache.thrift.TBase<getBinaryValues_args, getBinaryValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBinaryValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinaryValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinaryValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinaryValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinaryValues_args.class, metaDataMap);
    }

    public getBinaryValues_args() {
    }

    public getBinaryValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinaryValues_args(getBinaryValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getBinaryValues_args deepCopy() {
      return new getBinaryValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getBinaryValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getBinaryValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinaryValues_args)
        return this.equals((getBinaryValues_args)that);
      return false;
    }

    public boolean equals(getBinaryValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBinaryValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinaryValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinaryValues_argsStandardSchemeFactory implements SchemeFactory {
      public getBinaryValues_argsStandardScheme getScheme() {
        return new getBinaryValues_argsStandardScheme();
      }
    }

    private static class getBinaryValues_argsStandardScheme extends StandardScheme<getBinaryValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinaryValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinaryValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinaryValues_argsTupleSchemeFactory implements SchemeFactory {
      public getBinaryValues_argsTupleScheme getScheme() {
        return new getBinaryValues_argsTupleScheme();
      }
    }

    private static class getBinaryValues_argsTupleScheme extends TupleScheme<getBinaryValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinaryValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinaryValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getBinaryValues_result implements org.apache.thrift.TBase<getBinaryValues_result, getBinaryValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBinaryValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinaryValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinaryValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinaryValues_resultTupleSchemeFactory());
    }

    public List<ByteBuffer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinaryValues_result.class, metaDataMap);
    }

    public getBinaryValues_result() {
    }

    public getBinaryValues_result(
      List<ByteBuffer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinaryValues_result(getBinaryValues_result other) {
      if (other.isSetSuccess()) {
        List<ByteBuffer> __this__success = new ArrayList<ByteBuffer>(other.success);
        this.success = __this__success;
      }
    }

    public getBinaryValues_result deepCopy() {
      return new getBinaryValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ByteBuffer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ByteBuffer elem) {
      if (this.success == null) {
        this.success = new ArrayList<ByteBuffer>();
      }
      this.success.add(elem);
    }

    public List<ByteBuffer> getSuccess() {
      return this.success;
    }

    public getBinaryValues_result setSuccess(List<ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinaryValues_result)
        return this.equals((getBinaryValues_result)that);
      return false;
    }

    public boolean equals(getBinaryValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBinaryValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinaryValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinaryValues_resultStandardSchemeFactory implements SchemeFactory {
      public getBinaryValues_resultStandardScheme getScheme() {
        return new getBinaryValues_resultStandardScheme();
      }
    }

    private static class getBinaryValues_resultStandardScheme extends StandardScheme<getBinaryValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinaryValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ByteBuffer>(_list0.size);
                  ByteBuffer _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readBinary();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinaryValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (ByteBuffer _iter3 : struct.success)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinaryValues_resultTupleSchemeFactory implements SchemeFactory {
      public getBinaryValues_resultTupleScheme getScheme() {
        return new getBinaryValues_resultTupleScheme();
      }
    }

    private static class getBinaryValues_resultTupleScheme extends TupleScheme<getBinaryValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinaryValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ByteBuffer _iter4 : struct.success)
            {
              oprot.writeBinary(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinaryValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<ByteBuffer>(_list5.size);
            ByteBuffer _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readBinary();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBinaryValue_args implements org.apache.thrift.TBase<getBinaryValue_args, getBinaryValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBinaryValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinaryValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinaryValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinaryValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinaryValue_args.class, metaDataMap);
    }

    public getBinaryValue_args() {
    }

    public getBinaryValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinaryValue_args(getBinaryValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getBinaryValue_args deepCopy() {
      return new getBinaryValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getBinaryValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getBinaryValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinaryValue_args)
        return this.equals((getBinaryValue_args)that);
      return false;
    }

    public boolean equals(getBinaryValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBinaryValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinaryValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinaryValue_argsStandardSchemeFactory implements SchemeFactory {
      public getBinaryValue_argsStandardScheme getScheme() {
        return new getBinaryValue_argsStandardScheme();
      }
    }

    private static class getBinaryValue_argsStandardScheme extends StandardScheme<getBinaryValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinaryValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinaryValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinaryValue_argsTupleSchemeFactory implements SchemeFactory {
      public getBinaryValue_argsTupleScheme getScheme() {
        return new getBinaryValue_argsTupleScheme();
      }
    }

    private static class getBinaryValue_argsTupleScheme extends TupleScheme<getBinaryValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinaryValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinaryValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getBinaryValue_result implements org.apache.thrift.TBase<getBinaryValue_result, getBinaryValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBinaryValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinaryValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinaryValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinaryValue_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinaryValue_result.class, metaDataMap);
    }

    public getBinaryValue_result() {
    }

    public getBinaryValue_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinaryValue_result(getBinaryValue_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public getBinaryValue_result deepCopy() {
      return new getBinaryValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public getBinaryValue_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public getBinaryValue_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinaryValue_result)
        return this.equals((getBinaryValue_result)that);
      return false;
    }

    public boolean equals(getBinaryValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBinaryValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinaryValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinaryValue_resultStandardSchemeFactory implements SchemeFactory {
      public getBinaryValue_resultStandardScheme getScheme() {
        return new getBinaryValue_resultStandardScheme();
      }
    }

    private static class getBinaryValue_resultStandardScheme extends StandardScheme<getBinaryValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinaryValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinaryValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinaryValue_resultTupleSchemeFactory implements SchemeFactory {
      public getBinaryValue_resultTupleScheme getScheme() {
        return new getBinaryValue_resultTupleScheme();
      }
    }

    private static class getBinaryValue_resultTupleScheme extends TupleScheme<getBinaryValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinaryValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinaryValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLongValues_args implements org.apache.thrift.TBase<getLongValues_args, getLongValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLongValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLongValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLongValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLongValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLongValues_args.class, metaDataMap);
    }

    public getLongValues_args() {
    }

    public getLongValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLongValues_args(getLongValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getLongValues_args deepCopy() {
      return new getLongValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getLongValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getLongValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLongValues_args)
        return this.equals((getLongValues_args)that);
      return false;
    }

    public boolean equals(getLongValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLongValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLongValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLongValues_argsStandardSchemeFactory implements SchemeFactory {
      public getLongValues_argsStandardScheme getScheme() {
        return new getLongValues_argsStandardScheme();
      }
    }

    private static class getLongValues_argsStandardScheme extends StandardScheme<getLongValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLongValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLongValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLongValues_argsTupleSchemeFactory implements SchemeFactory {
      public getLongValues_argsTupleScheme getScheme() {
        return new getLongValues_argsTupleScheme();
      }
    }

    private static class getLongValues_argsTupleScheme extends TupleScheme<getLongValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLongValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLongValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getLongValues_result implements org.apache.thrift.TBase<getLongValues_result, getLongValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLongValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLongValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLongValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLongValues_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLongValues_result.class, metaDataMap);
    }

    public getLongValues_result() {
    }

    public getLongValues_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLongValues_result(getLongValues_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getLongValues_result deepCopy() {
      return new getLongValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getLongValues_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLongValues_result)
        return this.equals((getLongValues_result)that);
      return false;
    }

    public boolean equals(getLongValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLongValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLongValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLongValues_resultStandardSchemeFactory implements SchemeFactory {
      public getLongValues_resultStandardScheme getScheme() {
        return new getLongValues_resultStandardScheme();
      }
    }

    private static class getLongValues_resultStandardScheme extends StandardScheme<getLongValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLongValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLongValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter11 : struct.success)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLongValues_resultTupleSchemeFactory implements SchemeFactory {
      public getLongValues_resultTupleScheme getScheme() {
        return new getLongValues_resultTupleScheme();
      }
    }

    private static class getLongValues_resultTupleScheme extends TupleScheme<getLongValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLongValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter12 : struct.success)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLongValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLongValue_args implements org.apache.thrift.TBase<getLongValue_args, getLongValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLongValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLongValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLongValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLongValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLongValue_args.class, metaDataMap);
    }

    public getLongValue_args() {
    }

    public getLongValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLongValue_args(getLongValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getLongValue_args deepCopy() {
      return new getLongValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getLongValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getLongValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLongValue_args)
        return this.equals((getLongValue_args)that);
      return false;
    }

    public boolean equals(getLongValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLongValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLongValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLongValue_argsStandardSchemeFactory implements SchemeFactory {
      public getLongValue_argsStandardScheme getScheme() {
        return new getLongValue_argsStandardScheme();
      }
    }

    private static class getLongValue_argsStandardScheme extends StandardScheme<getLongValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLongValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLongValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLongValue_argsTupleSchemeFactory implements SchemeFactory {
      public getLongValue_argsTupleScheme getScheme() {
        return new getLongValue_argsTupleScheme();
      }
    }

    private static class getLongValue_argsTupleScheme extends TupleScheme<getLongValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLongValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLongValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getLongValue_result implements org.apache.thrift.TBase<getLongValue_result, getLongValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLongValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLongValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLongValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLongValue_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLongValue_result.class, metaDataMap);
    }

    public getLongValue_result() {
    }

    public getLongValue_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLongValue_result(getLongValue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getLongValue_result deepCopy() {
      return new getLongValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getLongValue_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLongValue_result)
        return this.equals((getLongValue_result)that);
      return false;
    }

    public boolean equals(getLongValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLongValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLongValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLongValue_resultStandardSchemeFactory implements SchemeFactory {
      public getLongValue_resultStandardScheme getScheme() {
        return new getLongValue_resultStandardScheme();
      }
    }

    private static class getLongValue_resultStandardScheme extends StandardScheme<getLongValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLongValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLongValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLongValue_resultTupleSchemeFactory implements SchemeFactory {
      public getLongValue_resultTupleScheme getScheme() {
        return new getLongValue_resultTupleScheme();
      }
    }

    private static class getLongValue_resultTupleScheme extends TupleScheme<getLongValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLongValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLongValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBooleanValues_args implements org.apache.thrift.TBase<getBooleanValues_args, getBooleanValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBooleanValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBooleanValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBooleanValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBooleanValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanValues_args.class, metaDataMap);
    }

    public getBooleanValues_args() {
    }

    public getBooleanValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBooleanValues_args(getBooleanValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getBooleanValues_args deepCopy() {
      return new getBooleanValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getBooleanValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getBooleanValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBooleanValues_args)
        return this.equals((getBooleanValues_args)that);
      return false;
    }

    public boolean equals(getBooleanValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBooleanValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBooleanValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBooleanValues_argsStandardSchemeFactory implements SchemeFactory {
      public getBooleanValues_argsStandardScheme getScheme() {
        return new getBooleanValues_argsStandardScheme();
      }
    }

    private static class getBooleanValues_argsStandardScheme extends StandardScheme<getBooleanValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBooleanValues_argsTupleSchemeFactory implements SchemeFactory {
      public getBooleanValues_argsTupleScheme getScheme() {
        return new getBooleanValues_argsTupleScheme();
      }
    }

    private static class getBooleanValues_argsTupleScheme extends TupleScheme<getBooleanValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getBooleanValues_result implements org.apache.thrift.TBase<getBooleanValues_result, getBooleanValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBooleanValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBooleanValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBooleanValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBooleanValues_resultTupleSchemeFactory());
    }

    public List<Boolean> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanValues_result.class, metaDataMap);
    }

    public getBooleanValues_result() {
    }

    public getBooleanValues_result(
      List<Boolean> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBooleanValues_result(getBooleanValues_result other) {
      if (other.isSetSuccess()) {
        List<Boolean> __this__success = new ArrayList<Boolean>(other.success);
        this.success = __this__success;
      }
    }

    public getBooleanValues_result deepCopy() {
      return new getBooleanValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Boolean> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(boolean elem) {
      if (this.success == null) {
        this.success = new ArrayList<Boolean>();
      }
      this.success.add(elem);
    }

    public List<Boolean> getSuccess() {
      return this.success;
    }

    public getBooleanValues_result setSuccess(List<Boolean> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Boolean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBooleanValues_result)
        return this.equals((getBooleanValues_result)that);
      return false;
    }

    public boolean equals(getBooleanValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBooleanValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBooleanValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBooleanValues_resultStandardSchemeFactory implements SchemeFactory {
      public getBooleanValues_resultStandardScheme getScheme() {
        return new getBooleanValues_resultStandardScheme();
      }
    }

    private static class getBooleanValues_resultStandardScheme extends StandardScheme<getBooleanValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Boolean>(_list16.size);
                  boolean _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readBool();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.success.size()));
            for (boolean _iter19 : struct.success)
            {
              oprot.writeBool(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBooleanValues_resultTupleSchemeFactory implements SchemeFactory {
      public getBooleanValues_resultTupleScheme getScheme() {
        return new getBooleanValues_resultTupleScheme();
      }
    }

    private static class getBooleanValues_resultTupleScheme extends TupleScheme<getBooleanValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (boolean _iter20 : struct.success)
            {
              oprot.writeBool(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.success = new ArrayList<Boolean>(_list21.size);
            boolean _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readBool();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBooleanValue_args implements org.apache.thrift.TBase<getBooleanValue_args, getBooleanValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBooleanValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBooleanValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBooleanValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBooleanValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanValue_args.class, metaDataMap);
    }

    public getBooleanValue_args() {
    }

    public getBooleanValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBooleanValue_args(getBooleanValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getBooleanValue_args deepCopy() {
      return new getBooleanValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getBooleanValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getBooleanValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBooleanValue_args)
        return this.equals((getBooleanValue_args)that);
      return false;
    }

    public boolean equals(getBooleanValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBooleanValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBooleanValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBooleanValue_argsStandardSchemeFactory implements SchemeFactory {
      public getBooleanValue_argsStandardScheme getScheme() {
        return new getBooleanValue_argsStandardScheme();
      }
    }

    private static class getBooleanValue_argsStandardScheme extends StandardScheme<getBooleanValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBooleanValue_argsTupleSchemeFactory implements SchemeFactory {
      public getBooleanValue_argsTupleScheme getScheme() {
        return new getBooleanValue_argsTupleScheme();
      }
    }

    private static class getBooleanValue_argsTupleScheme extends TupleScheme<getBooleanValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getBooleanValue_result implements org.apache.thrift.TBase<getBooleanValue_result, getBooleanValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBooleanValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBooleanValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBooleanValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBooleanValue_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanValue_result.class, metaDataMap);
    }

    public getBooleanValue_result() {
    }

    public getBooleanValue_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBooleanValue_result(getBooleanValue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBooleanValue_result deepCopy() {
      return new getBooleanValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getBooleanValue_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBooleanValue_result)
        return this.equals((getBooleanValue_result)that);
      return false;
    }

    public boolean equals(getBooleanValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBooleanValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBooleanValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBooleanValue_resultStandardSchemeFactory implements SchemeFactory {
      public getBooleanValue_resultStandardScheme getScheme() {
        return new getBooleanValue_resultStandardScheme();
      }
    }

    private static class getBooleanValue_resultStandardScheme extends StandardScheme<getBooleanValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBooleanValue_resultTupleSchemeFactory implements SchemeFactory {
      public getBooleanValue_resultTupleScheme getScheme() {
        return new getBooleanValue_resultTupleScheme();
      }
    }

    private static class getBooleanValue_resultTupleScheme extends TupleScheme<getBooleanValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDateValues_args implements org.apache.thrift.TBase<getDateValues_args, getDateValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDateValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDateValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDateValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDateValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDateValues_args.class, metaDataMap);
    }

    public getDateValues_args() {
    }

    public getDateValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDateValues_args(getDateValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getDateValues_args deepCopy() {
      return new getDateValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getDateValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getDateValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDateValues_args)
        return this.equals((getDateValues_args)that);
      return false;
    }

    public boolean equals(getDateValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDateValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDateValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDateValues_argsStandardSchemeFactory implements SchemeFactory {
      public getDateValues_argsStandardScheme getScheme() {
        return new getDateValues_argsStandardScheme();
      }
    }

    private static class getDateValues_argsStandardScheme extends StandardScheme<getDateValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDateValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDateValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDateValues_argsTupleSchemeFactory implements SchemeFactory {
      public getDateValues_argsTupleScheme getScheme() {
        return new getDateValues_argsTupleScheme();
      }
    }

    private static class getDateValues_argsTupleScheme extends TupleScheme<getDateValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDateValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDateValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getDateValues_result implements org.apache.thrift.TBase<getDateValues_result, getDateValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDateValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDateValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDateValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDateValues_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDateValues_result.class, metaDataMap);
    }

    public getDateValues_result() {
    }

    public getDateValues_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDateValues_result(getDateValues_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getDateValues_result deepCopy() {
      return new getDateValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getDateValues_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDateValues_result)
        return this.equals((getDateValues_result)that);
      return false;
    }

    public boolean equals(getDateValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDateValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDateValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDateValues_resultStandardSchemeFactory implements SchemeFactory {
      public getDateValues_resultStandardScheme getScheme() {
        return new getDateValues_resultStandardScheme();
      }
    }

    private static class getDateValues_resultStandardScheme extends StandardScheme<getDateValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDateValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list24.size);
                  long _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readI64();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDateValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter27 : struct.success)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDateValues_resultTupleSchemeFactory implements SchemeFactory {
      public getDateValues_resultTupleScheme getScheme() {
        return new getDateValues_resultTupleScheme();
      }
    }

    private static class getDateValues_resultTupleScheme extends TupleScheme<getDateValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDateValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter28 : struct.success)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDateValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list29.size);
            long _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI64();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDateValue_args implements org.apache.thrift.TBase<getDateValue_args, getDateValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDateValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDateValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDateValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDateValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDateValue_args.class, metaDataMap);
    }

    public getDateValue_args() {
    }

    public getDateValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDateValue_args(getDateValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getDateValue_args deepCopy() {
      return new getDateValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getDateValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getDateValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDateValue_args)
        return this.equals((getDateValue_args)that);
      return false;
    }

    public boolean equals(getDateValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDateValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDateValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDateValue_argsStandardSchemeFactory implements SchemeFactory {
      public getDateValue_argsStandardScheme getScheme() {
        return new getDateValue_argsStandardScheme();
      }
    }

    private static class getDateValue_argsStandardScheme extends StandardScheme<getDateValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDateValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDateValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDateValue_argsTupleSchemeFactory implements SchemeFactory {
      public getDateValue_argsTupleScheme getScheme() {
        return new getDateValue_argsTupleScheme();
      }
    }

    private static class getDateValue_argsTupleScheme extends TupleScheme<getDateValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDateValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDateValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getDateValue_result implements org.apache.thrift.TBase<getDateValue_result, getDateValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDateValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDateValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDateValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDateValue_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDateValue_result.class, metaDataMap);
    }

    public getDateValue_result() {
    }

    public getDateValue_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDateValue_result(getDateValue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getDateValue_result deepCopy() {
      return new getDateValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getDateValue_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDateValue_result)
        return this.equals((getDateValue_result)that);
      return false;
    }

    public boolean equals(getDateValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDateValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDateValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDateValue_resultStandardSchemeFactory implements SchemeFactory {
      public getDateValue_resultStandardScheme getScheme() {
        return new getDateValue_resultStandardScheme();
      }
    }

    private static class getDateValue_resultStandardScheme extends StandardScheme<getDateValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDateValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDateValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDateValue_resultTupleSchemeFactory implements SchemeFactory {
      public getDateValue_resultTupleScheme getScheme() {
        return new getDateValue_resultTupleScheme();
      }
    }

    private static class getDateValue_resultTupleScheme extends TupleScheme<getDateValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDateValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDateValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDoubleValue_args implements org.apache.thrift.TBase<getDoubleValue_args, getDoubleValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDoubleValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDoubleValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDoubleValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDoubleValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDoubleValue_args.class, metaDataMap);
    }

    public getDoubleValue_args() {
    }

    public getDoubleValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDoubleValue_args(getDoubleValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getDoubleValue_args deepCopy() {
      return new getDoubleValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getDoubleValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getDoubleValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDoubleValue_args)
        return this.equals((getDoubleValue_args)that);
      return false;
    }

    public boolean equals(getDoubleValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDoubleValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDoubleValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDoubleValue_argsStandardSchemeFactory implements SchemeFactory {
      public getDoubleValue_argsStandardScheme getScheme() {
        return new getDoubleValue_argsStandardScheme();
      }
    }

    private static class getDoubleValue_argsStandardScheme extends StandardScheme<getDoubleValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDoubleValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDoubleValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDoubleValue_argsTupleSchemeFactory implements SchemeFactory {
      public getDoubleValue_argsTupleScheme getScheme() {
        return new getDoubleValue_argsTupleScheme();
      }
    }

    private static class getDoubleValue_argsTupleScheme extends TupleScheme<getDoubleValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDoubleValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDoubleValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getDoubleValue_result implements org.apache.thrift.TBase<getDoubleValue_result, getDoubleValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDoubleValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDoubleValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDoubleValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDoubleValue_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDoubleValue_result.class, metaDataMap);
    }

    public getDoubleValue_result() {
    }

    public getDoubleValue_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDoubleValue_result(getDoubleValue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getDoubleValue_result deepCopy() {
      return new getDoubleValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getDoubleValue_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDoubleValue_result)
        return this.equals((getDoubleValue_result)that);
      return false;
    }

    public boolean equals(getDoubleValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDoubleValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDoubleValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDoubleValue_resultStandardSchemeFactory implements SchemeFactory {
      public getDoubleValue_resultStandardScheme getScheme() {
        return new getDoubleValue_resultStandardScheme();
      }
    }

    private static class getDoubleValue_resultStandardScheme extends StandardScheme<getDoubleValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDoubleValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDoubleValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDoubleValue_resultTupleSchemeFactory implements SchemeFactory {
      public getDoubleValue_resultTupleScheme getScheme() {
        return new getDoubleValue_resultTupleScheme();
      }
    }

    private static class getDoubleValue_resultTupleScheme extends TupleScheme<getDoubleValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDoubleValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDoubleValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNameValues_args implements org.apache.thrift.TBase<getNameValues_args, getNameValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNameValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameValues_args.class, metaDataMap);
    }

    public getNameValues_args() {
    }

    public getNameValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameValues_args(getNameValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getNameValues_args deepCopy() {
      return new getNameValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getNameValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getNameValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameValues_args)
        return this.equals((getNameValues_args)that);
      return false;
    }

    public boolean equals(getNameValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameValues_argsStandardSchemeFactory implements SchemeFactory {
      public getNameValues_argsStandardScheme getScheme() {
        return new getNameValues_argsStandardScheme();
      }
    }

    private static class getNameValues_argsStandardScheme extends StandardScheme<getNameValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameValues_argsTupleSchemeFactory implements SchemeFactory {
      public getNameValues_argsTupleScheme getScheme() {
        return new getNameValues_argsTupleScheme();
      }
    }

    private static class getNameValues_argsTupleScheme extends TupleScheme<getNameValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getNameValues_result implements org.apache.thrift.TBase<getNameValues_result, getNameValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNameValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameValues_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameValues_result.class, metaDataMap);
    }

    public getNameValues_result() {
    }

    public getNameValues_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameValues_result(getNameValues_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getNameValues_result deepCopy() {
      return new getNameValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getNameValues_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameValues_result)
        return this.equals((getNameValues_result)that);
      return false;
    }

    public boolean equals(getNameValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameValues_resultStandardSchemeFactory implements SchemeFactory {
      public getNameValues_resultStandardScheme getScheme() {
        return new getNameValues_resultStandardScheme();
      }
    }

    private static class getNameValues_resultStandardScheme extends StandardScheme<getNameValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameValues_resultTupleSchemeFactory implements SchemeFactory {
      public getNameValues_resultTupleScheme getScheme() {
        return new getNameValues_resultTupleScheme();
      }
    }

    private static class getNameValues_resultTupleScheme extends TupleScheme<getNameValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNameValue_args implements org.apache.thrift.TBase<getNameValue_args, getNameValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNameValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameValue_args.class, metaDataMap);
    }

    public getNameValue_args() {
    }

    public getNameValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameValue_args(getNameValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getNameValue_args deepCopy() {
      return new getNameValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getNameValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getNameValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameValue_args)
        return this.equals((getNameValue_args)that);
      return false;
    }

    public boolean equals(getNameValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameValue_argsStandardSchemeFactory implements SchemeFactory {
      public getNameValue_argsStandardScheme getScheme() {
        return new getNameValue_argsStandardScheme();
      }
    }

    private static class getNameValue_argsStandardScheme extends StandardScheme<getNameValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameValue_argsTupleSchemeFactory implements SchemeFactory {
      public getNameValue_argsTupleScheme getScheme() {
        return new getNameValue_argsTupleScheme();
      }
    }

    private static class getNameValue_argsTupleScheme extends TupleScheme<getNameValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getNameValue_result implements org.apache.thrift.TBase<getNameValue_result, getNameValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNameValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameValue_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameValue_result.class, metaDataMap);
    }

    public getNameValue_result() {
    }

    public getNameValue_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameValue_result(getNameValue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNameValue_result deepCopy() {
      return new getNameValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNameValue_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameValue_result)
        return this.equals((getNameValue_result)that);
      return false;
    }

    public boolean equals(getNameValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameValue_resultStandardSchemeFactory implements SchemeFactory {
      public getNameValue_resultStandardScheme getScheme() {
        return new getNameValue_resultStandardScheme();
      }
    }

    private static class getNameValue_resultStandardScheme extends StandardScheme<getNameValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameValue_resultTupleSchemeFactory implements SchemeFactory {
      public getNameValue_resultTupleScheme getScheme() {
        return new getNameValue_resultTupleScheme();
      }
    }

    private static class getNameValue_resultTupleScheme extends TupleScheme<getNameValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPathValues_args implements org.apache.thrift.TBase<getPathValues_args, getPathValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPathValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPathValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPathValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPathValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPathValues_args.class, metaDataMap);
    }

    public getPathValues_args() {
    }

    public getPathValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPathValues_args(getPathValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getPathValues_args deepCopy() {
      return new getPathValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getPathValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getPathValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPathValues_args)
        return this.equals((getPathValues_args)that);
      return false;
    }

    public boolean equals(getPathValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPathValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPathValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPathValues_argsStandardSchemeFactory implements SchemeFactory {
      public getPathValues_argsStandardScheme getScheme() {
        return new getPathValues_argsStandardScheme();
      }
    }

    private static class getPathValues_argsStandardScheme extends StandardScheme<getPathValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPathValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPathValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPathValues_argsTupleSchemeFactory implements SchemeFactory {
      public getPathValues_argsTupleScheme getScheme() {
        return new getPathValues_argsTupleScheme();
      }
    }

    private static class getPathValues_argsTupleScheme extends TupleScheme<getPathValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPathValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPathValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getPathValues_result implements org.apache.thrift.TBase<getPathValues_result, getPathValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPathValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPathValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPathValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPathValues_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPathValues_result.class, metaDataMap);
    }

    public getPathValues_result() {
    }

    public getPathValues_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPathValues_result(getPathValues_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getPathValues_result deepCopy() {
      return new getPathValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getPathValues_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPathValues_result)
        return this.equals((getPathValues_result)that);
      return false;
    }

    public boolean equals(getPathValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPathValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPathValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPathValues_resultStandardSchemeFactory implements SchemeFactory {
      public getPathValues_resultStandardScheme getScheme() {
        return new getPathValues_resultStandardScheme();
      }
    }

    private static class getPathValues_resultStandardScheme extends StandardScheme<getPathValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPathValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list40.size);
                  String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPathValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter43 : struct.success)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPathValues_resultTupleSchemeFactory implements SchemeFactory {
      public getPathValues_resultTupleScheme getScheme() {
        return new getPathValues_resultTupleScheme();
      }
    }

    private static class getPathValues_resultTupleScheme extends TupleScheme<getPathValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPathValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter44 : struct.success)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPathValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list45.size);
            String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPathValue_args implements org.apache.thrift.TBase<getPathValue_args, getPathValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPathValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPathValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPathValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPathValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPathValue_args.class, metaDataMap);
    }

    public getPathValue_args() {
    }

    public getPathValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPathValue_args(getPathValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getPathValue_args deepCopy() {
      return new getPathValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getPathValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getPathValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPathValue_args)
        return this.equals((getPathValue_args)that);
      return false;
    }

    public boolean equals(getPathValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPathValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPathValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPathValue_argsStandardSchemeFactory implements SchemeFactory {
      public getPathValue_argsStandardScheme getScheme() {
        return new getPathValue_argsStandardScheme();
      }
    }

    private static class getPathValue_argsStandardScheme extends StandardScheme<getPathValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPathValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPathValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPathValue_argsTupleSchemeFactory implements SchemeFactory {
      public getPathValue_argsTupleScheme getScheme() {
        return new getPathValue_argsTupleScheme();
      }
    }

    private static class getPathValue_argsTupleScheme extends TupleScheme<getPathValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPathValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPathValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getPathValue_result implements org.apache.thrift.TBase<getPathValue_result, getPathValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPathValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPathValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPathValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPathValue_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPathValue_result.class, metaDataMap);
    }

    public getPathValue_result() {
    }

    public getPathValue_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPathValue_result(getPathValue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPathValue_result deepCopy() {
      return new getPathValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPathValue_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPathValue_result)
        return this.equals((getPathValue_result)that);
      return false;
    }

    public boolean equals(getPathValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPathValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPathValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPathValue_resultStandardSchemeFactory implements SchemeFactory {
      public getPathValue_resultStandardScheme getScheme() {
        return new getPathValue_resultStandardScheme();
      }
    }

    private static class getPathValue_resultStandardScheme extends StandardScheme<getPathValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPathValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPathValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPathValue_resultTupleSchemeFactory implements SchemeFactory {
      public getPathValue_resultTupleScheme getScheme() {
        return new getPathValue_resultTupleScheme();
      }
    }

    private static class getPathValue_resultTupleScheme extends TupleScheme<getPathValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPathValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPathValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStringValues_args implements org.apache.thrift.TBase<getStringValues_args, getStringValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStringValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStringValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStringValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStringValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringValues_args.class, metaDataMap);
    }

    public getStringValues_args() {
    }

    public getStringValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStringValues_args(getStringValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getStringValues_args deepCopy() {
      return new getStringValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getStringValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getStringValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStringValues_args)
        return this.equals((getStringValues_args)that);
      return false;
    }

    public boolean equals(getStringValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStringValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStringValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStringValues_argsStandardSchemeFactory implements SchemeFactory {
      public getStringValues_argsStandardScheme getScheme() {
        return new getStringValues_argsStandardScheme();
      }
    }

    private static class getStringValues_argsStandardScheme extends StandardScheme<getStringValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStringValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStringValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStringValues_argsTupleSchemeFactory implements SchemeFactory {
      public getStringValues_argsTupleScheme getScheme() {
        return new getStringValues_argsTupleScheme();
      }
    }

    private static class getStringValues_argsTupleScheme extends TupleScheme<getStringValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStringValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStringValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getStringValues_result implements org.apache.thrift.TBase<getStringValues_result, getStringValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStringValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStringValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStringValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStringValues_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringValues_result.class, metaDataMap);
    }

    public getStringValues_result() {
    }

    public getStringValues_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStringValues_result(getStringValues_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getStringValues_result deepCopy() {
      return new getStringValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getStringValues_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStringValues_result)
        return this.equals((getStringValues_result)that);
      return false;
    }

    public boolean equals(getStringValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStringValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStringValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStringValues_resultStandardSchemeFactory implements SchemeFactory {
      public getStringValues_resultStandardScheme getScheme() {
        return new getStringValues_resultStandardScheme();
      }
    }

    private static class getStringValues_resultStandardScheme extends StandardScheme<getStringValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStringValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list48.size);
                  String _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readString();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStringValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter51 : struct.success)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStringValues_resultTupleSchemeFactory implements SchemeFactory {
      public getStringValues_resultTupleScheme getScheme() {
        return new getStringValues_resultTupleScheme();
      }
    }

    private static class getStringValues_resultTupleScheme extends TupleScheme<getStringValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStringValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter52 : struct.success)
            {
              oprot.writeString(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStringValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list53.size);
            String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStringValue_args implements org.apache.thrift.TBase<getStringValue_args, getStringValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStringValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStringValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStringValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStringValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringValue_args.class, metaDataMap);
    }

    public getStringValue_args() {
    }

    public getStringValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStringValue_args(getStringValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getStringValue_args deepCopy() {
      return new getStringValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getStringValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getStringValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStringValue_args)
        return this.equals((getStringValue_args)that);
      return false;
    }

    public boolean equals(getStringValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStringValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStringValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStringValue_argsStandardSchemeFactory implements SchemeFactory {
      public getStringValue_argsStandardScheme getScheme() {
        return new getStringValue_argsStandardScheme();
      }
    }

    private static class getStringValue_argsStandardScheme extends StandardScheme<getStringValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStringValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStringValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStringValue_argsTupleSchemeFactory implements SchemeFactory {
      public getStringValue_argsTupleScheme getScheme() {
        return new getStringValue_argsTupleScheme();
      }
    }

    private static class getStringValue_argsTupleScheme extends TupleScheme<getStringValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStringValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStringValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getStringValue_result implements org.apache.thrift.TBase<getStringValue_result, getStringValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStringValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStringValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStringValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStringValue_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringValue_result.class, metaDataMap);
    }

    public getStringValue_result() {
    }

    public getStringValue_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStringValue_result(getStringValue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStringValue_result deepCopy() {
      return new getStringValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStringValue_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStringValue_result)
        return this.equals((getStringValue_result)that);
      return false;
    }

    public boolean equals(getStringValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStringValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStringValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStringValue_resultStandardSchemeFactory implements SchemeFactory {
      public getStringValue_resultStandardScheme getScheme() {
        return new getStringValue_resultStandardScheme();
      }
    }

    private static class getStringValue_resultStandardScheme extends StandardScheme<getStringValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStringValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStringValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStringValue_resultTupleSchemeFactory implements SchemeFactory {
      public getStringValue_resultTupleScheme getScheme() {
        return new getStringValue_resultTupleScheme();
      }
    }

    private static class getStringValue_resultTupleScheme extends TupleScheme<getStringValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStringValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStringValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getURIValues_args implements org.apache.thrift.TBase<getURIValues_args, getURIValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getURIValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURIValues_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURIValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURIValues_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURIValues_args.class, metaDataMap);
    }

    public getURIValues_args() {
    }

    public getURIValues_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURIValues_args(getURIValues_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getURIValues_args deepCopy() {
      return new getURIValues_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getURIValues_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getURIValues_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURIValues_args)
        return this.equals((getURIValues_args)that);
      return false;
    }

    public boolean equals(getURIValues_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURIValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURIValues_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURIValues_argsStandardSchemeFactory implements SchemeFactory {
      public getURIValues_argsStandardScheme getScheme() {
        return new getURIValues_argsStandardScheme();
      }
    }

    private static class getURIValues_argsStandardScheme extends StandardScheme<getURIValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURIValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURIValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURIValues_argsTupleSchemeFactory implements SchemeFactory {
      public getURIValues_argsTupleScheme getScheme() {
        return new getURIValues_argsTupleScheme();
      }
    }

    private static class getURIValues_argsTupleScheme extends TupleScheme<getURIValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURIValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURIValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getURIValues_result implements org.apache.thrift.TBase<getURIValues_result, getURIValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getURIValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURIValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURIValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURIValues_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURIValues_result.class, metaDataMap);
    }

    public getURIValues_result() {
    }

    public getURIValues_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURIValues_result(getURIValues_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getURIValues_result deepCopy() {
      return new getURIValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getURIValues_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURIValues_result)
        return this.equals((getURIValues_result)that);
      return false;
    }

    public boolean equals(getURIValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURIValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURIValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURIValues_resultStandardSchemeFactory implements SchemeFactory {
      public getURIValues_resultStandardScheme getScheme() {
        return new getURIValues_resultStandardScheme();
      }
    }

    private static class getURIValues_resultStandardScheme extends StandardScheme<getURIValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURIValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list56.size);
                  String _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readString();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURIValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter59 : struct.success)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURIValues_resultTupleSchemeFactory implements SchemeFactory {
      public getURIValues_resultTupleScheme getScheme() {
        return new getURIValues_resultTupleScheme();
      }
    }

    private static class getURIValues_resultTupleScheme extends TupleScheme<getURIValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURIValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter60 : struct.success)
            {
              oprot.writeString(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURIValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list61.size);
            String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getURIValue_args implements org.apache.thrift.TBase<getURIValue_args, getURIValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getURIValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURIValue_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURIValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURIValue_argsTupleSchemeFactory());
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree tree; // required
    public TPropertyState property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.jumlabs.jcr.oak.rpc.api.TTree.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURIValue_args.class, metaDataMap);
    }

    public getURIValue_args() {
    }

    public getURIValue_args(
      org.jumlabs.jcr.oak.rpc.api.TTree tree,
      TPropertyState property)
    {
      this();
      this.tree = tree;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURIValue_args(getURIValue_args other) {
      if (other.isSetTree()) {
        this.tree = new org.jumlabs.jcr.oak.rpc.api.TTree(other.tree);
      }
      if (other.isSetProperty()) {
        this.property = new TPropertyState(other.property);
      }
    }

    public getURIValue_args deepCopy() {
      return new getURIValue_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
      this.property = null;
    }

    public org.jumlabs.jcr.oak.rpc.api.TTree getTree() {
      return this.tree;
    }

    public getURIValue_args setTree(org.jumlabs.jcr.oak.rpc.api.TTree tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public TPropertyState getProperty() {
      return this.property;
    }

    public getURIValue_args setProperty(TPropertyState property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((org.jumlabs.jcr.oak.rpc.api.TTree)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((TPropertyState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURIValue_args)
        return this.equals((getURIValue_args)that);
      return false;
    }

    public boolean equals(getURIValue_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      boolean present_property = true && (isSetProperty());
      list.add(present_property);
      if (present_property)
        list.add(property);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURIValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURIValue_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tree != null) {
        tree.validate();
      }
      if (property != null) {
        property.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURIValue_argsStandardSchemeFactory implements SchemeFactory {
      public getURIValue_argsStandardScheme getScheme() {
        return new getURIValue_argsStandardScheme();
      }
    }

    private static class getURIValue_argsStandardScheme extends StandardScheme<getURIValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURIValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
                struct.tree.read(iprot);
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.property = new TPropertyState();
                struct.property.read(iprot);
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURIValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          struct.tree.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          struct.property.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURIValue_argsTupleSchemeFactory implements SchemeFactory {
      public getURIValue_argsTupleScheme getScheme() {
        return new getURIValue_argsTupleScheme();
      }
    }

    private static class getURIValue_argsTupleScheme extends TupleScheme<getURIValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURIValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTree()) {
          struct.tree.write(oprot);
        }
        if (struct.isSetProperty()) {
          struct.property.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURIValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tree = new org.jumlabs.jcr.oak.rpc.api.TTree();
          struct.tree.read(iprot);
          struct.setTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = new TPropertyState();
          struct.property.read(iprot);
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class getURIValue_result implements org.apache.thrift.TBase<getURIValue_result, getURIValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getURIValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURIValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURIValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURIValue_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURIValue_result.class, metaDataMap);
    }

    public getURIValue_result() {
    }

    public getURIValue_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURIValue_result(getURIValue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getURIValue_result deepCopy() {
      return new getURIValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getURIValue_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURIValue_result)
        return this.equals((getURIValue_result)that);
      return false;
    }

    public boolean equals(getURIValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURIValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURIValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURIValue_resultStandardSchemeFactory implements SchemeFactory {
      public getURIValue_resultStandardScheme getScheme() {
        return new getURIValue_resultStandardScheme();
      }
    }

    private static class getURIValue_resultStandardScheme extends StandardScheme<getURIValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURIValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURIValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURIValue_resultTupleSchemeFactory implements SchemeFactory {
      public getURIValue_resultTupleScheme getScheme() {
        return new getURIValue_resultTupleScheme();
      }
    }

    private static class getURIValue_resultTupleScheme extends TupleScheme<getURIValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURIValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURIValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
