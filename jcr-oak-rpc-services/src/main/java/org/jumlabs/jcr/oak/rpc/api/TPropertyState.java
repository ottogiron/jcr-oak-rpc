/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jumlabs.jcr.oak.rpc.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-7-20")
public class TPropertyState implements org.apache.thrift.TBase<TPropertyState, TPropertyState._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyState");

  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isArray", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BINARY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryValue", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BINARY_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryValues", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LONG_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("longValues", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField LONG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longValue", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValues", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValue", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DATE_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("dateValues", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField DATE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateValue", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValues", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValues", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPropertyStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPropertyStateTupleSchemeFactory());
  }

  public int count; // required
  public String name; // required
  public int size; // required
  public boolean isArray; // required
  /**
   * 
   * @see TType
   */
  public TType type; // required
  public ByteBuffer binaryValue; // required
  public List<ByteBuffer> binaryValues; // required
  public List<Long> longValues; // required
  public long longValue; // required
  public List<Boolean> booleanValues; // required
  public boolean booleanValue; // required
  public List<Long> dateValues; // required
  public long dateValue; // required
  public List<Double> doubleValues; // required
  public double doubleValue; // required
  public List<String> stringValues; // required
  public String stringValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT((short)1, "count"),
    NAME((short)2, "name"),
    SIZE((short)3, "size"),
    IS_ARRAY((short)4, "isArray"),
    /**
     * 
     * @see TType
     */
    TYPE((short)5, "type"),
    BINARY_VALUE((short)6, "binaryValue"),
    BINARY_VALUES((short)7, "binaryValues"),
    LONG_VALUES((short)8, "longValues"),
    LONG_VALUE((short)9, "longValue"),
    BOOLEAN_VALUES((short)10, "booleanValues"),
    BOOLEAN_VALUE((short)11, "booleanValue"),
    DATE_VALUES((short)12, "dateValues"),
    DATE_VALUE((short)13, "dateValue"),
    DOUBLE_VALUES((short)14, "doubleValues"),
    DOUBLE_VALUE((short)15, "doubleValue"),
    STRING_VALUES((short)16, "stringValues"),
    STRING_VALUE((short)17, "stringValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT
          return COUNT;
        case 2: // NAME
          return NAME;
        case 3: // SIZE
          return SIZE;
        case 4: // IS_ARRAY
          return IS_ARRAY;
        case 5: // TYPE
          return TYPE;
        case 6: // BINARY_VALUE
          return BINARY_VALUE;
        case 7: // BINARY_VALUES
          return BINARY_VALUES;
        case 8: // LONG_VALUES
          return LONG_VALUES;
        case 9: // LONG_VALUE
          return LONG_VALUE;
        case 10: // BOOLEAN_VALUES
          return BOOLEAN_VALUES;
        case 11: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        case 12: // DATE_VALUES
          return DATE_VALUES;
        case 13: // DATE_VALUE
          return DATE_VALUE;
        case 14: // DOUBLE_VALUES
          return DOUBLE_VALUES;
        case 15: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 16: // STRING_VALUES
          return STRING_VALUES;
        case 17: // STRING_VALUE
          return STRING_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __ISARRAY_ISSET_ID = 2;
  private static final int __LONGVALUE_ISSET_ID = 3;
  private static final int __BOOLEANVALUE_ISSET_ID = 4;
  private static final int __DATEVALUE_ISSET_ID = 5;
  private static final int __DOUBLEVALUE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("isArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TType.class)));
    tmpMap.put(_Fields.BINARY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("binaryValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BINARY_VALUES, new org.apache.thrift.meta_data.FieldMetaData("binaryValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.LONG_VALUES, new org.apache.thrift.meta_data.FieldMetaData("longValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LONG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("longValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOOLEAN_VALUES, new org.apache.thrift.meta_data.FieldMetaData("booleanValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BOOLEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("booleanValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATE_VALUES, new org.apache.thrift.meta_data.FieldMetaData("dateValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DATE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("dateValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUES, new org.apache.thrift.meta_data.FieldMetaData("doubleValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VALUES, new org.apache.thrift.meta_data.FieldMetaData("stringValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyState.class, metaDataMap);
  }

  public TPropertyState() {
  }

  public TPropertyState(
    int count,
    String name,
    int size,
    boolean isArray,
    TType type,
    ByteBuffer binaryValue,
    List<ByteBuffer> binaryValues,
    List<Long> longValues,
    long longValue,
    List<Boolean> booleanValues,
    boolean booleanValue,
    List<Long> dateValues,
    long dateValue,
    List<Double> doubleValues,
    double doubleValue,
    List<String> stringValues,
    String stringValue)
  {
    this();
    this.count = count;
    setCountIsSet(true);
    this.name = name;
    this.size = size;
    setSizeIsSet(true);
    this.isArray = isArray;
    setIsArrayIsSet(true);
    this.type = type;
    this.binaryValue = binaryValue;
    this.binaryValues = binaryValues;
    this.longValues = longValues;
    this.longValue = longValue;
    setLongValueIsSet(true);
    this.booleanValues = booleanValues;
    this.booleanValue = booleanValue;
    setBooleanValueIsSet(true);
    this.dateValues = dateValues;
    this.dateValue = dateValue;
    setDateValueIsSet(true);
    this.doubleValues = doubleValues;
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    this.stringValues = stringValues;
    this.stringValue = stringValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyState(TPropertyState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.count = other.count;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.size = other.size;
    this.isArray = other.isArray;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetBinaryValue()) {
      this.binaryValue = org.apache.thrift.TBaseHelper.copyBinary(other.binaryValue);
    }
    if (other.isSetBinaryValues()) {
      List<ByteBuffer> __this__binaryValues = new ArrayList<ByteBuffer>(other.binaryValues);
      this.binaryValues = __this__binaryValues;
    }
    if (other.isSetLongValues()) {
      List<Long> __this__longValues = new ArrayList<Long>(other.longValues);
      this.longValues = __this__longValues;
    }
    this.longValue = other.longValue;
    if (other.isSetBooleanValues()) {
      List<Boolean> __this__booleanValues = new ArrayList<Boolean>(other.booleanValues);
      this.booleanValues = __this__booleanValues;
    }
    this.booleanValue = other.booleanValue;
    if (other.isSetDateValues()) {
      List<Long> __this__dateValues = new ArrayList<Long>(other.dateValues);
      this.dateValues = __this__dateValues;
    }
    this.dateValue = other.dateValue;
    if (other.isSetDoubleValues()) {
      List<Double> __this__doubleValues = new ArrayList<Double>(other.doubleValues);
      this.doubleValues = __this__doubleValues;
    }
    this.doubleValue = other.doubleValue;
    if (other.isSetStringValues()) {
      List<String> __this__stringValues = new ArrayList<String>(other.stringValues);
      this.stringValues = __this__stringValues;
    }
    if (other.isSetStringValue()) {
      this.stringValue = other.stringValue;
    }
  }

  public TPropertyState deepCopy() {
    return new TPropertyState(this);
  }

  @Override
  public void clear() {
    setCountIsSet(false);
    this.count = 0;
    this.name = null;
    setSizeIsSet(false);
    this.size = 0;
    setIsArrayIsSet(false);
    this.isArray = false;
    this.type = null;
    this.binaryValue = null;
    this.binaryValues = null;
    this.longValues = null;
    setLongValueIsSet(false);
    this.longValue = 0;
    this.booleanValues = null;
    setBooleanValueIsSet(false);
    this.booleanValue = false;
    this.dateValues = null;
    setDateValueIsSet(false);
    this.dateValue = 0;
    this.doubleValues = null;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    this.stringValues = null;
    this.stringValue = null;
  }

  public int getCount() {
    return this.count;
  }

  public TPropertyState setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TPropertyState setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public TPropertyState setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public boolean isIsArray() {
    return this.isArray;
  }

  public TPropertyState setIsArray(boolean isArray) {
    this.isArray = isArray;
    setIsArrayIsSet(true);
    return this;
  }

  public void unsetIsArray() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARRAY_ISSET_ID);
  }

  /** Returns true if field isArray is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArray() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARRAY_ISSET_ID);
  }

  public void setIsArrayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARRAY_ISSET_ID, value);
  }

  /**
   * 
   * @see TType
   */
  public TType getType() {
    return this.type;
  }

  /**
   * 
   * @see TType
   */
  public TPropertyState setType(TType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public byte[] getBinaryValue() {
    setBinaryValue(org.apache.thrift.TBaseHelper.rightSize(binaryValue));
    return binaryValue == null ? null : binaryValue.array();
  }

  public ByteBuffer bufferForBinaryValue() {
    return binaryValue;
  }

  public TPropertyState setBinaryValue(byte[] binaryValue) {
    setBinaryValue(binaryValue == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryValue));
    return this;
  }

  public TPropertyState setBinaryValue(ByteBuffer binaryValue) {
    this.binaryValue = binaryValue;
    return this;
  }

  public void unsetBinaryValue() {
    this.binaryValue = null;
  }

  /** Returns true if field binaryValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryValue() {
    return this.binaryValue != null;
  }

  public void setBinaryValueIsSet(boolean value) {
    if (!value) {
      this.binaryValue = null;
    }
  }

  public int getBinaryValuesSize() {
    return (this.binaryValues == null) ? 0 : this.binaryValues.size();
  }

  public java.util.Iterator<ByteBuffer> getBinaryValuesIterator() {
    return (this.binaryValues == null) ? null : this.binaryValues.iterator();
  }

  public void addToBinaryValues(ByteBuffer elem) {
    if (this.binaryValues == null) {
      this.binaryValues = new ArrayList<ByteBuffer>();
    }
    this.binaryValues.add(elem);
  }

  public List<ByteBuffer> getBinaryValues() {
    return this.binaryValues;
  }

  public TPropertyState setBinaryValues(List<ByteBuffer> binaryValues) {
    this.binaryValues = binaryValues;
    return this;
  }

  public void unsetBinaryValues() {
    this.binaryValues = null;
  }

  /** Returns true if field binaryValues is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryValues() {
    return this.binaryValues != null;
  }

  public void setBinaryValuesIsSet(boolean value) {
    if (!value) {
      this.binaryValues = null;
    }
  }

  public int getLongValuesSize() {
    return (this.longValues == null) ? 0 : this.longValues.size();
  }

  public java.util.Iterator<Long> getLongValuesIterator() {
    return (this.longValues == null) ? null : this.longValues.iterator();
  }

  public void addToLongValues(long elem) {
    if (this.longValues == null) {
      this.longValues = new ArrayList<Long>();
    }
    this.longValues.add(elem);
  }

  public List<Long> getLongValues() {
    return this.longValues;
  }

  public TPropertyState setLongValues(List<Long> longValues) {
    this.longValues = longValues;
    return this;
  }

  public void unsetLongValues() {
    this.longValues = null;
  }

  /** Returns true if field longValues is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValues() {
    return this.longValues != null;
  }

  public void setLongValuesIsSet(boolean value) {
    if (!value) {
      this.longValues = null;
    }
  }

  public long getLongValue() {
    return this.longValue;
  }

  public TPropertyState setLongValue(long longValue) {
    this.longValue = longValue;
    setLongValueIsSet(true);
    return this;
  }

  public void unsetLongValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGVALUE_ISSET_ID);
  }

  /** Returns true if field longValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValue() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGVALUE_ISSET_ID);
  }

  public void setLongValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGVALUE_ISSET_ID, value);
  }

  public int getBooleanValuesSize() {
    return (this.booleanValues == null) ? 0 : this.booleanValues.size();
  }

  public java.util.Iterator<Boolean> getBooleanValuesIterator() {
    return (this.booleanValues == null) ? null : this.booleanValues.iterator();
  }

  public void addToBooleanValues(boolean elem) {
    if (this.booleanValues == null) {
      this.booleanValues = new ArrayList<Boolean>();
    }
    this.booleanValues.add(elem);
  }

  public List<Boolean> getBooleanValues() {
    return this.booleanValues;
  }

  public TPropertyState setBooleanValues(List<Boolean> booleanValues) {
    this.booleanValues = booleanValues;
    return this;
  }

  public void unsetBooleanValues() {
    this.booleanValues = null;
  }

  /** Returns true if field booleanValues is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValues() {
    return this.booleanValues != null;
  }

  public void setBooleanValuesIsSet(boolean value) {
    if (!value) {
      this.booleanValues = null;
    }
  }

  public boolean isBooleanValue() {
    return this.booleanValue;
  }

  public TPropertyState setBooleanValue(boolean booleanValue) {
    this.booleanValue = booleanValue;
    setBooleanValueIsSet(true);
    return this;
  }

  public void unsetBooleanValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  /** Returns true if field booleanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  public void setBooleanValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID, value);
  }

  public int getDateValuesSize() {
    return (this.dateValues == null) ? 0 : this.dateValues.size();
  }

  public java.util.Iterator<Long> getDateValuesIterator() {
    return (this.dateValues == null) ? null : this.dateValues.iterator();
  }

  public void addToDateValues(long elem) {
    if (this.dateValues == null) {
      this.dateValues = new ArrayList<Long>();
    }
    this.dateValues.add(elem);
  }

  public List<Long> getDateValues() {
    return this.dateValues;
  }

  public TPropertyState setDateValues(List<Long> dateValues) {
    this.dateValues = dateValues;
    return this;
  }

  public void unsetDateValues() {
    this.dateValues = null;
  }

  /** Returns true if field dateValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDateValues() {
    return this.dateValues != null;
  }

  public void setDateValuesIsSet(boolean value) {
    if (!value) {
      this.dateValues = null;
    }
  }

  public long getDateValue() {
    return this.dateValue;
  }

  public TPropertyState setDateValue(long dateValue) {
    this.dateValue = dateValue;
    setDateValueIsSet(true);
    return this;
  }

  public void unsetDateValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEVALUE_ISSET_ID);
  }

  /** Returns true if field dateValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDateValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEVALUE_ISSET_ID);
  }

  public void setDateValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEVALUE_ISSET_ID, value);
  }

  public int getDoubleValuesSize() {
    return (this.doubleValues == null) ? 0 : this.doubleValues.size();
  }

  public java.util.Iterator<Double> getDoubleValuesIterator() {
    return (this.doubleValues == null) ? null : this.doubleValues.iterator();
  }

  public void addToDoubleValues(double elem) {
    if (this.doubleValues == null) {
      this.doubleValues = new ArrayList<Double>();
    }
    this.doubleValues.add(elem);
  }

  public List<Double> getDoubleValues() {
    return this.doubleValues;
  }

  public TPropertyState setDoubleValues(List<Double> doubleValues) {
    this.doubleValues = doubleValues;
    return this;
  }

  public void unsetDoubleValues() {
    this.doubleValues = null;
  }

  /** Returns true if field doubleValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValues() {
    return this.doubleValues != null;
  }

  public void setDoubleValuesIsSet(boolean value) {
    if (!value) {
      this.doubleValues = null;
    }
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public TPropertyState setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  public int getStringValuesSize() {
    return (this.stringValues == null) ? 0 : this.stringValues.size();
  }

  public java.util.Iterator<String> getStringValuesIterator() {
    return (this.stringValues == null) ? null : this.stringValues.iterator();
  }

  public void addToStringValues(String elem) {
    if (this.stringValues == null) {
      this.stringValues = new ArrayList<String>();
    }
    this.stringValues.add(elem);
  }

  public List<String> getStringValues() {
    return this.stringValues;
  }

  public TPropertyState setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
    return this;
  }

  public void unsetStringValues() {
    this.stringValues = null;
  }

  /** Returns true if field stringValues is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValues() {
    return this.stringValues != null;
  }

  public void setStringValuesIsSet(boolean value) {
    if (!value) {
      this.stringValues = null;
    }
  }

  public String getStringValue() {
    return this.stringValue;
  }

  public TPropertyState setStringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case IS_ARRAY:
      if (value == null) {
        unsetIsArray();
      } else {
        setIsArray((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TType)value);
      }
      break;

    case BINARY_VALUE:
      if (value == null) {
        unsetBinaryValue();
      } else {
        setBinaryValue((ByteBuffer)value);
      }
      break;

    case BINARY_VALUES:
      if (value == null) {
        unsetBinaryValues();
      } else {
        setBinaryValues((List<ByteBuffer>)value);
      }
      break;

    case LONG_VALUES:
      if (value == null) {
        unsetLongValues();
      } else {
        setLongValues((List<Long>)value);
      }
      break;

    case LONG_VALUE:
      if (value == null) {
        unsetLongValue();
      } else {
        setLongValue((Long)value);
      }
      break;

    case BOOLEAN_VALUES:
      if (value == null) {
        unsetBooleanValues();
      } else {
        setBooleanValues((List<Boolean>)value);
      }
      break;

    case BOOLEAN_VALUE:
      if (value == null) {
        unsetBooleanValue();
      } else {
        setBooleanValue((Boolean)value);
      }
      break;

    case DATE_VALUES:
      if (value == null) {
        unsetDateValues();
      } else {
        setDateValues((List<Long>)value);
      }
      break;

    case DATE_VALUE:
      if (value == null) {
        unsetDateValue();
      } else {
        setDateValue((Long)value);
      }
      break;

    case DOUBLE_VALUES:
      if (value == null) {
        unsetDoubleValues();
      } else {
        setDoubleValues((List<Double>)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((Double)value);
      }
      break;

    case STRING_VALUES:
      if (value == null) {
        unsetStringValues();
      } else {
        setStringValues((List<String>)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT:
      return Integer.valueOf(getCount());

    case NAME:
      return getName();

    case SIZE:
      return Integer.valueOf(getSize());

    case IS_ARRAY:
      return Boolean.valueOf(isIsArray());

    case TYPE:
      return getType();

    case BINARY_VALUE:
      return getBinaryValue();

    case BINARY_VALUES:
      return getBinaryValues();

    case LONG_VALUES:
      return getLongValues();

    case LONG_VALUE:
      return Long.valueOf(getLongValue());

    case BOOLEAN_VALUES:
      return getBooleanValues();

    case BOOLEAN_VALUE:
      return Boolean.valueOf(isBooleanValue());

    case DATE_VALUES:
      return getDateValues();

    case DATE_VALUE:
      return Long.valueOf(getDateValue());

    case DOUBLE_VALUES:
      return getDoubleValues();

    case DOUBLE_VALUE:
      return Double.valueOf(getDoubleValue());

    case STRING_VALUES:
      return getStringValues();

    case STRING_VALUE:
      return getStringValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT:
      return isSetCount();
    case NAME:
      return isSetName();
    case SIZE:
      return isSetSize();
    case IS_ARRAY:
      return isSetIsArray();
    case TYPE:
      return isSetType();
    case BINARY_VALUE:
      return isSetBinaryValue();
    case BINARY_VALUES:
      return isSetBinaryValues();
    case LONG_VALUES:
      return isSetLongValues();
    case LONG_VALUE:
      return isSetLongValue();
    case BOOLEAN_VALUES:
      return isSetBooleanValues();
    case BOOLEAN_VALUE:
      return isSetBooleanValue();
    case DATE_VALUES:
      return isSetDateValues();
    case DATE_VALUE:
      return isSetDateValue();
    case DOUBLE_VALUES:
      return isSetDoubleValues();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case STRING_VALUES:
      return isSetStringValues();
    case STRING_VALUE:
      return isSetStringValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyState)
      return this.equals((TPropertyState)that);
    return false;
  }

  public boolean equals(TPropertyState that) {
    if (that == null)
      return false;

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_isArray = true;
    boolean that_present_isArray = true;
    if (this_present_isArray || that_present_isArray) {
      if (!(this_present_isArray && that_present_isArray))
        return false;
      if (this.isArray != that.isArray)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_binaryValue = true && this.isSetBinaryValue();
    boolean that_present_binaryValue = true && that.isSetBinaryValue();
    if (this_present_binaryValue || that_present_binaryValue) {
      if (!(this_present_binaryValue && that_present_binaryValue))
        return false;
      if (!this.binaryValue.equals(that.binaryValue))
        return false;
    }

    boolean this_present_binaryValues = true && this.isSetBinaryValues();
    boolean that_present_binaryValues = true && that.isSetBinaryValues();
    if (this_present_binaryValues || that_present_binaryValues) {
      if (!(this_present_binaryValues && that_present_binaryValues))
        return false;
      if (!this.binaryValues.equals(that.binaryValues))
        return false;
    }

    boolean this_present_longValues = true && this.isSetLongValues();
    boolean that_present_longValues = true && that.isSetLongValues();
    if (this_present_longValues || that_present_longValues) {
      if (!(this_present_longValues && that_present_longValues))
        return false;
      if (!this.longValues.equals(that.longValues))
        return false;
    }

    boolean this_present_longValue = true;
    boolean that_present_longValue = true;
    if (this_present_longValue || that_present_longValue) {
      if (!(this_present_longValue && that_present_longValue))
        return false;
      if (this.longValue != that.longValue)
        return false;
    }

    boolean this_present_booleanValues = true && this.isSetBooleanValues();
    boolean that_present_booleanValues = true && that.isSetBooleanValues();
    if (this_present_booleanValues || that_present_booleanValues) {
      if (!(this_present_booleanValues && that_present_booleanValues))
        return false;
      if (!this.booleanValues.equals(that.booleanValues))
        return false;
    }

    boolean this_present_booleanValue = true;
    boolean that_present_booleanValue = true;
    if (this_present_booleanValue || that_present_booleanValue) {
      if (!(this_present_booleanValue && that_present_booleanValue))
        return false;
      if (this.booleanValue != that.booleanValue)
        return false;
    }

    boolean this_present_dateValues = true && this.isSetDateValues();
    boolean that_present_dateValues = true && that.isSetDateValues();
    if (this_present_dateValues || that_present_dateValues) {
      if (!(this_present_dateValues && that_present_dateValues))
        return false;
      if (!this.dateValues.equals(that.dateValues))
        return false;
    }

    boolean this_present_dateValue = true;
    boolean that_present_dateValue = true;
    if (this_present_dateValue || that_present_dateValue) {
      if (!(this_present_dateValue && that_present_dateValue))
        return false;
      if (this.dateValue != that.dateValue)
        return false;
    }

    boolean this_present_doubleValues = true && this.isSetDoubleValues();
    boolean that_present_doubleValues = true && that.isSetDoubleValues();
    if (this_present_doubleValues || that_present_doubleValues) {
      if (!(this_present_doubleValues && that_present_doubleValues))
        return false;
      if (!this.doubleValues.equals(that.doubleValues))
        return false;
    }

    boolean this_present_doubleValue = true;
    boolean that_present_doubleValue = true;
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_stringValues = true && this.isSetStringValues();
    boolean that_present_stringValues = true && that.isSetStringValues();
    if (this_present_stringValues || that_present_stringValues) {
      if (!(this_present_stringValues && that_present_stringValues))
        return false;
      if (!this.stringValues.equals(that.stringValues))
        return false;
    }

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_isArray = true;
    list.add(present_isArray);
    if (present_isArray)
      list.add(isArray);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_binaryValue = true && (isSetBinaryValue());
    list.add(present_binaryValue);
    if (present_binaryValue)
      list.add(binaryValue);

    boolean present_binaryValues = true && (isSetBinaryValues());
    list.add(present_binaryValues);
    if (present_binaryValues)
      list.add(binaryValues);

    boolean present_longValues = true && (isSetLongValues());
    list.add(present_longValues);
    if (present_longValues)
      list.add(longValues);

    boolean present_longValue = true;
    list.add(present_longValue);
    if (present_longValue)
      list.add(longValue);

    boolean present_booleanValues = true && (isSetBooleanValues());
    list.add(present_booleanValues);
    if (present_booleanValues)
      list.add(booleanValues);

    boolean present_booleanValue = true;
    list.add(present_booleanValue);
    if (present_booleanValue)
      list.add(booleanValue);

    boolean present_dateValues = true && (isSetDateValues());
    list.add(present_dateValues);
    if (present_dateValues)
      list.add(dateValues);

    boolean present_dateValue = true;
    list.add(present_dateValue);
    if (present_dateValue)
      list.add(dateValue);

    boolean present_doubleValues = true && (isSetDoubleValues());
    list.add(present_doubleValues);
    if (present_doubleValues)
      list.add(doubleValues);

    boolean present_doubleValue = true;
    list.add(present_doubleValue);
    if (present_doubleValue)
      list.add(doubleValue);

    boolean present_stringValues = true && (isSetStringValues());
    list.add(present_stringValues);
    if (present_stringValues)
      list.add(stringValues);

    boolean present_stringValue = true && (isSetStringValue());
    list.add(present_stringValue);
    if (present_stringValue)
      list.add(stringValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPropertyState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArray()).compareTo(other.isSetIsArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArray, other.isArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryValue()).compareTo(other.isSetBinaryValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryValue, other.binaryValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryValues()).compareTo(other.isSetBinaryValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryValues, other.binaryValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongValues()).compareTo(other.isSetLongValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longValues, other.longValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongValue()).compareTo(other.isSetLongValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longValue, other.longValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBooleanValues()).compareTo(other.isSetBooleanValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValues, other.booleanValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBooleanValue()).compareTo(other.isSetBooleanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValue, other.booleanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateValues()).compareTo(other.isSetDateValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateValues, other.dateValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateValue()).compareTo(other.isSetDateValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateValue, other.dateValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValues()).compareTo(other.isSetDoubleValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValues, other.doubleValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValues()).compareTo(other.isSetStringValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValues, other.stringValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPropertyState(");
    boolean first = true;

    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArray:");
    sb.append(this.isArray);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryValue:");
    if (this.binaryValue == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binaryValue, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryValues:");
    if (this.binaryValues == null) {
      sb.append("null");
    } else {
      sb.append(this.binaryValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longValues:");
    if (this.longValues == null) {
      sb.append("null");
    } else {
      sb.append(this.longValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longValue:");
    sb.append(this.longValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanValues:");
    if (this.booleanValues == null) {
      sb.append("null");
    } else {
      sb.append(this.booleanValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanValue:");
    sb.append(this.booleanValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateValues:");
    if (this.dateValues == null) {
      sb.append("null");
    } else {
      sb.append(this.dateValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateValue:");
    sb.append(this.dateValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleValues:");
    if (this.doubleValues == null) {
      sb.append("null");
    } else {
      sb.append(this.doubleValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleValue:");
    sb.append(this.doubleValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValues:");
    if (this.stringValues == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValue:");
    if (this.stringValue == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyStateStandardSchemeFactory implements SchemeFactory {
    public TPropertyStateStandardScheme getScheme() {
      return new TPropertyStateStandardScheme();
    }
  }

  private static class TPropertyStateStandardScheme extends StandardScheme<TPropertyState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isArray = iprot.readBool();
              struct.setIsArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.jumlabs.jcr.oak.rpc.api.TType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BINARY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryValue = iprot.readBinary();
              struct.setBinaryValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BINARY_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.binaryValues = new ArrayList<ByteBuffer>(_list0.size);
                ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.binaryValues.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBinaryValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LONG_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.longValues = new ArrayList<Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.longValues.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setLongValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LONG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longValue = iprot.readI64();
              struct.setLongValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BOOLEAN_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.booleanValues = new ArrayList<Boolean>(_list6.size);
                boolean _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readBool();
                  struct.booleanValues.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setBooleanValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BOOLEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.booleanValue = iprot.readBool();
              struct.setBooleanValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATE_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.dateValues = new ArrayList<Long>(_list9.size);
                long _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI64();
                  struct.dateValues.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDateValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateValue = iprot.readI64();
              struct.setDateValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DOUBLE_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.doubleValues = new ArrayList<Double>(_list12.size);
                double _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readDouble();
                  struct.doubleValues.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setDoubleValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STRING_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.stringValues = new ArrayList<String>(_list15.size);
                String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.stringValues.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setStringValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringValue = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARRAY_FIELD_DESC);
      oprot.writeBool(struct.isArray);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.binaryValue != null) {
        oprot.writeFieldBegin(BINARY_VALUE_FIELD_DESC);
        oprot.writeBinary(struct.binaryValue);
        oprot.writeFieldEnd();
      }
      if (struct.binaryValues != null) {
        oprot.writeFieldBegin(BINARY_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binaryValues.size()));
          for (ByteBuffer _iter18 : struct.binaryValues)
          {
            oprot.writeBinary(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.longValues != null) {
        oprot.writeFieldBegin(LONG_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.longValues.size()));
          for (long _iter19 : struct.longValues)
          {
            oprot.writeI64(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONG_VALUE_FIELD_DESC);
      oprot.writeI64(struct.longValue);
      oprot.writeFieldEnd();
      if (struct.booleanValues != null) {
        oprot.writeFieldBegin(BOOLEAN_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.booleanValues.size()));
          for (boolean _iter20 : struct.booleanValues)
          {
            oprot.writeBool(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
      oprot.writeBool(struct.booleanValue);
      oprot.writeFieldEnd();
      if (struct.dateValues != null) {
        oprot.writeFieldBegin(DATE_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.dateValues.size()));
          for (long _iter21 : struct.dateValues)
          {
            oprot.writeI64(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_VALUE_FIELD_DESC);
      oprot.writeI64(struct.dateValue);
      oprot.writeFieldEnd();
      if (struct.doubleValues != null) {
        oprot.writeFieldBegin(DOUBLE_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleValues.size()));
          for (double _iter22 : struct.doubleValues)
          {
            oprot.writeDouble(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.doubleValue);
      oprot.writeFieldEnd();
      if (struct.stringValues != null) {
        oprot.writeFieldBegin(STRING_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValues.size()));
          for (String _iter23 : struct.stringValues)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringValue != null) {
        oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
        oprot.writeString(struct.stringValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyStateTupleSchemeFactory implements SchemeFactory {
    public TPropertyStateTupleScheme getScheme() {
      return new TPropertyStateTupleScheme();
    }
  }

  private static class TPropertyStateTupleScheme extends TupleScheme<TPropertyState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCount()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSize()) {
        optionals.set(2);
      }
      if (struct.isSetIsArray()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetBinaryValue()) {
        optionals.set(5);
      }
      if (struct.isSetBinaryValues()) {
        optionals.set(6);
      }
      if (struct.isSetLongValues()) {
        optionals.set(7);
      }
      if (struct.isSetLongValue()) {
        optionals.set(8);
      }
      if (struct.isSetBooleanValues()) {
        optionals.set(9);
      }
      if (struct.isSetBooleanValue()) {
        optionals.set(10);
      }
      if (struct.isSetDateValues()) {
        optionals.set(11);
      }
      if (struct.isSetDateValue()) {
        optionals.set(12);
      }
      if (struct.isSetDoubleValues()) {
        optionals.set(13);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(14);
      }
      if (struct.isSetStringValues()) {
        optionals.set(15);
      }
      if (struct.isSetStringValue()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetIsArray()) {
        oprot.writeBool(struct.isArray);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetBinaryValue()) {
        oprot.writeBinary(struct.binaryValue);
      }
      if (struct.isSetBinaryValues()) {
        {
          oprot.writeI32(struct.binaryValues.size());
          for (ByteBuffer _iter24 : struct.binaryValues)
          {
            oprot.writeBinary(_iter24);
          }
        }
      }
      if (struct.isSetLongValues()) {
        {
          oprot.writeI32(struct.longValues.size());
          for (long _iter25 : struct.longValues)
          {
            oprot.writeI64(_iter25);
          }
        }
      }
      if (struct.isSetLongValue()) {
        oprot.writeI64(struct.longValue);
      }
      if (struct.isSetBooleanValues()) {
        {
          oprot.writeI32(struct.booleanValues.size());
          for (boolean _iter26 : struct.booleanValues)
          {
            oprot.writeBool(_iter26);
          }
        }
      }
      if (struct.isSetBooleanValue()) {
        oprot.writeBool(struct.booleanValue);
      }
      if (struct.isSetDateValues()) {
        {
          oprot.writeI32(struct.dateValues.size());
          for (long _iter27 : struct.dateValues)
          {
            oprot.writeI64(_iter27);
          }
        }
      }
      if (struct.isSetDateValue()) {
        oprot.writeI64(struct.dateValue);
      }
      if (struct.isSetDoubleValues()) {
        {
          oprot.writeI32(struct.doubleValues.size());
          for (double _iter28 : struct.doubleValues)
          {
            oprot.writeDouble(_iter28);
          }
        }
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
      if (struct.isSetStringValues()) {
        {
          oprot.writeI32(struct.stringValues.size());
          for (String _iter29 : struct.stringValues)
          {
            oprot.writeString(_iter29);
          }
        }
      }
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.stringValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isArray = iprot.readBool();
        struct.setIsArrayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = org.jumlabs.jcr.oak.rpc.api.TType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.binaryValue = iprot.readBinary();
        struct.setBinaryValueIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryValues = new ArrayList<ByteBuffer>(_list30.size);
          ByteBuffer _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = iprot.readBinary();
            struct.binaryValues.add(_elem31);
          }
        }
        struct.setBinaryValuesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longValues = new ArrayList<Long>(_list33.size);
          long _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = iprot.readI64();
            struct.longValues.add(_elem34);
          }
        }
        struct.setLongValuesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.longValue = iprot.readI64();
        struct.setLongValueIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanValues = new ArrayList<Boolean>(_list36.size);
          boolean _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readBool();
            struct.booleanValues.add(_elem37);
          }
        }
        struct.setBooleanValuesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.booleanValue = iprot.readBool();
        struct.setBooleanValueIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.dateValues = new ArrayList<Long>(_list39.size);
          long _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI64();
            struct.dateValues.add(_elem40);
          }
        }
        struct.setDateValuesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dateValue = iprot.readI64();
        struct.setDateValueIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleValues = new ArrayList<Double>(_list42.size);
          double _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readDouble();
            struct.doubleValues.add(_elem43);
          }
        }
        struct.setDoubleValuesIsSet(true);
      }
      if (incoming.get(14)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringValues = new ArrayList<String>(_list45.size);
          String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.stringValues.add(_elem46);
          }
        }
        struct.setStringValuesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.stringValue = iprot.readString();
        struct.setStringValueIsSet(true);
      }
    }
  }

}

